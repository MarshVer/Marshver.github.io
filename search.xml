<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>电脑必装软件合集</title>
      <link href="/2022/08/04/dian-nao-bi-zhuang-ruan-jian-he-ji/"/>
      <url>/2022/08/04/dian-nao-bi-zhuang-ruan-jian-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="iGG谷歌访问助手"><a href="#iGG谷歌访问助手" class="headerlink" title="iGG谷歌访问助手"></a>iGG谷歌访问助手</h1><p>谷歌浏览器第一步，下载iGG谷歌助手，再登陆账号同步账号信息。<br>下载网址：<a href="https://chrome.zzzmh.cn/info/ncldcbhpeplkfijdhnoepdgdnmjkckij">https://chrome.zzzmh.cn/info/ncldcbhpeplkfijdhnoepdgdnmjkckij</a></p><h1 id="桌面图标美化"><a href="#桌面图标美化" class="headerlink" title="桌面图标美化"></a>桌面图标美化</h1><h2 id="RocketDock"><a href="#RocketDock" class="headerlink" title="RocketDock"></a>RocketDock</h2><p>RocketDock是一款模仿苹果的win下的桌面美化工具。<br>官网：<a href="https://punklabs.com/">https://punklabs.com/</a></p><h2 id="Stacks-Docklet-2-0"><a href="#Stacks-Docklet-2-0" class="headerlink" title="Stacks Docklet 2.0"></a>Stacks Docklet 2.0</h2><p>Stacks Docklet是RocketDock中的一个插件，可以实现图片的折叠与展开。<br>下载地址<a href="https://www.softpedia.com/get/Desktop-Enhancements/Other-Desktop-Enhancements/Stacks-Docklet.shtml">https://www.softpedia.com/get/Desktop-Enhancements/Other-Desktop-Enhancements/Stacks-Docklet.shtml</a><br><strong>注意</strong>：安装过程中记得把其他的安装的√给×了<br>安装完成后把整个文件夹剪切到.\RocketDock\Docklets文件夹下</p><h1 id="7-Zip"><a href="#7-Zip" class="headerlink" title="7-Zip"></a>7-Zip</h1><p>强力的压缩软件。<br>官网：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p><h1 id="360驱动大师"><a href="#360驱动大师" class="headerlink" title="360驱动大师"></a>360驱动大师</h1><p>简洁的驱动更新软件，不过全面诊断的的时候*<strong>不要</strong>修复系统安全防护，该项会安装360全家桶。<br>官网：<a href="http://dm.weishi.360.cn/home.html">http://dm.weishi.360.cn/home.html</a></p><h1 id="格式工厂"><a href="#格式工厂" class="headerlink" title="格式工厂"></a>格式工厂</h1><p>格式工厂是一款免费多功能的多媒体格式转换软件。<br>官网：<a href="http://www.pcgeshi.com/">http://www.pcgeshi.com/</a></p><h1 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h1><p>IDM是Internet Download Manager的简称，是一款电脑专业的下载器，不仅下载速度快，还能嗅探网站的视频并下载。<br>官网：<a href="https://www.internetdownloadmanager.cn/">https://www.internetdownloadmanager.cn/</a><br>破解版：链接：<a href="https://pan.baidu.com/s/1OaXHih42NmHGNZEkVzIL-Q?pwd=1234">https://pan.baidu.com/s/1OaXHih42NmHGNZEkVzIL-Q?pwd=1234</a> 提取码：1234</p><h1 id="nn加速器"><a href="#nn加速器" class="headerlink" title="nn加速器"></a>nn加速器</h1><p>nn加速器是一款持续很久的免费游戏加速器。<br>官网：<a href="https://www.nn.com/">https://www.nn.com/</a></p><h1 id="potplayer"><a href="#potplayer" class="headerlink" title="potplayer"></a>potplayer</h1><p>PotPlayer 是 KMPlayer 的原制作者姜龙喜进入 Daum 公司后的新一代网络播放器。PotPlayer 的优势在于强大的内置解码器；而 KMPlayer 的优势在于强大的定制能力和个性化功能。<br>下载地址：<a href="https://potplayer.en.softonic.com/">https://potplayer.en.softonic.com/</a></p><h1 id="Snipaste"><a href="#Snipaste" class="headerlink" title="Snipaste"></a>Snipaste</h1><p>强大的截图软件。<br>官网：<a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></p><h1 id="Uninstall-Tool"><a href="#Uninstall-Tool" class="headerlink" title="Uninstall Tool"></a>Uninstall Tool</h1><p>强力的卸载软件。<br>官网：<a href="https://crystalidea.com/uninstall-tool">https://crystalidea.com/uninstall-tool</a></p><h1 id="酷我音乐"><a href="#酷我音乐" class="headerlink" title="酷我音乐"></a>酷我音乐</h1><p>破解版：链接：<a href="https://pan.baidu.com/s/1ywJAMq-n5bEyBTu3fsvdoA?pwd=1234">https://pan.baidu.com/s/1ywJAMq-n5bEyBTu3fsvdoA?pwd=1234</a> 提取码：1234</p>]]></content>
      
      
      
        <tags>
            
            <tag> 搞机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html学习笔记</title>
      <link href="/2022/07/27/html-xue-xi-xin-de/"/>
      <url>/2022/07/27/html-xue-xi-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="Web标准的构成"><a href="#Web标准的构成" class="headerlink" title="Web标准的构成"></a>Web标准的构成</h1><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>用于对<strong>网页元素</strong>进行整理和分类，html</td></tr><tr><td>表现</td><td>用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，CSS</td></tr><tr><td>行为</td><td>指网页模型的定义及<strong>交互</strong>的编写，Javascript</td></tr></tbody></table><p>即结构写到Html文件中，表现写到CSS文件中，行为写到Javascript文件中；三者中 <strong>结构</strong> 最重要</p><h1 id="基本结构标签"><a href="#基本结构标签" class="headerlink" title="基本结构标签"></a>基本结构标签</h1><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>html和&#x2F;html</td><td>HTML标签</td><td>页面中最大的标签，我们称为 根标签</td></tr><tr><td>head和&#x2F;head</td><td>文档的头部</td><td>注意在head标签中我们必须要设置的标签是title</td></tr><tr><td>title和&#x2F;title</td><td>文档的标题</td><td>让页面拥有一个属于自己的网页标题</td></tr><tr><td>body和&#x2F;body</td><td>文档的主体</td><td>元素包含文档的所有内容，页面内容基本都是放到body里面的</td></tr></tbody></table><p>vscode新建html文件，英文“!”,第一个自动创建基本结构如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span> <span class="token comment" spellcheck="true">&lt;!-- 类型声明 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- lang语言种类是zh-CN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 字符集是UTF-8(万国码) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>创建的页面标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    主题内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>注：vscode添加注释用Alt+Shift+A注释所选内容，ctrl+&#x2F;注释所选整行。</p><h1 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h1><h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><p>&lt;h1&gt;-&lt;h6&gt;6个等级的标题标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></code></pre><h2 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>段落内容随浏览器大小自动变化，段落与段落之间有间隙。</p><h2 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>换行标签</code></pre><p>换行标签是单标签，行之间没有间隙。</p><h2 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 也可用&lt;b>&lt;/b> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>倾斜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 也可用&lt;i>&lt;/i> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 也可用&lt;s>&lt;/s> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 也可用&lt;u>&lt;/u> --></span></code></pre><p>推荐用前面的。</p><h2 id="lt-div-gt-和-lt-span-gt-标签"><a href="#lt-div-gt-和-lt-span-gt-标签" class="headerlink" title="&lt;div&gt;和&lt;span&gt;标签"></a>&lt;div&gt;和&lt;span&gt;标签</h2><p>&lt;div&gt;和&lt;span&gt;没有语义，它们相当于一个盒子，用来装内容。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div独占一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span之间一行显示，但之间有距离<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像URL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>img也是单标签，下面是其他属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td><strong>必须属性</strong></td></tr><tr><td>alt</td><td>文本</td><td>图像不能显示的文字</td></tr><tr><td>title</td><td>文本</td><td>鼠标放到图像上显示的文字</td></tr><tr><td>width</td><td>像素</td><td>图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>图像的高度</td></tr><tr><td>border</td><td>像素</td><td>图像的边框粗细</td></tr></tbody></table><p>设置width或者height其中之一，另一个属性会等比例缩放。<br>border一般不通过html设定，而通过CSS来设定。</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><table><thead><tr><th>相对属性分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像位于html文件同一级 如&lt;img src&#x3D;”hello.jpg” &#x2F;&gt;</td></tr><tr><td>下一级路径</td><td>&#x2F;</td><td>图像位于hyml文件下一级 &lt;img src&#x3D;”images&#x2F;hello.jpg” &#x2F;&gt;</td></tr><tr><td>上一级路径</td><td>..&#x2F;</td><td>图像位于html文件上一级 &lt;img src&#x3D;”..&#x2F;hello.jpg” &#x2F;&gt;</td></tr></tbody></table><p>上一级如果出现多层嵌套则用..&#x2F;..&#x2F;.多层.&#x2F;hello.jpg</p><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>从盘符开始，如D:\MarshVer’s Blog\source_posts\Html学习心得\img.jpg。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>D:\MarshVer<span class="token punctuation">'</span>s Blog\source\_posts\Html学习心得\img.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>实际开发常用完整的图片网络地址。</p><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 文本或图像 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><table><thead><tr><th>属性</th><th>作业</th></tr></thead><tbody><tr><td>href</td><td>指定链接目标的url地址，<strong>必须属性</strong></td></tr><tr><td>target</td><td>指定连接打开方式，默认_self，可设置_blank在新窗口中打开</td></tr></tbody></table><ul><li>外部链接href里跳转的目标是网址，网址需要从 <strong>http:&#x2F;&#x2F;</strong> 开始</li><li>内部链接href里跳转的目标是本地html文件的相对地址，</li><li>空链接href里填写#临时替代，</li><li>下载链接href填写的是文件就是下载文件（.exe，.zip等）。</li></ul><h2 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h2><p>锚点链接可以快速定位到页面的某个位置。</p><ul><li>在链接文本的href属性中，设置属性值为 <strong>#名字</strong> 的形式，如 &lt;a href&#x3D;”#two”&gt; 锚点&lt;&#x2F;a&gt;</li><li>找到目标位置标签，里面添加一个 <strong>id属性</strong>，如&lt;h3 id&#x3D;”two”&gt;锚点介绍&lt;&#x2F;h3&gt;</li></ul><p>锚点链接类似于超链接标签，只是href里的内容不同，同时还需要在跳转的目的字段加入id属性。</p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><p>html文件中的某些特殊字符可能无法显示，需要用特定的代码代替，常用的如下：</p><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>&amp;lt;</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt;</td></tr><tr><td></td><td>空格符</td><td>&amp;nbsp;</td></tr></tbody></table><h1 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h1><h2 id="表格标签基本结构"><a href="#表格标签基本结构" class="headerlink" title="表格标签基本结构"></a>表格标签基本结构</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><ul><li>&lt;table&gt;&lt;&#x2F;table&gt;定义表格</li><li>&lt;tr&gt;&lt;&#x2F;tr&gt;定义表格中的行，必须嵌套在&lt;table&gt;&lt;&#x2F;table&gt;中</li><li>&lt;td&gt;&lt;&#x2F;td&gt;定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;&#x2F;tr&gt;中</li></ul><h2 id="表头单元格标签"><a href="#表头单元格标签" class="headerlink" title="表头单元格标签"></a>表头单元格标签</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>表头单元格位于第一行或第一列，其内容默认加粗居中显示。</p><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p>表格属性实际不常用，一般在CSS中设置。</p><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left，center、right</td><td>表格对齐方式</td></tr><tr><td>border</td><td>1或””</td><td>单元格是否有边框，默认没有</td></tr><tr><td>cellpadding</td><td>像素值</td><td>单元格边缘与其内容的距离，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>单元格之间的距离，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>表格宽度</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode中C和C++的环境配置</title>
      <link href="/2022/07/05/vscode-zhong-c-he-c-de-huan-jing-pei-zhi/"/>
      <url>/2022/07/05/vscode-zhong-c-he-c-de-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="VScode中配置C-x2F-C"><a href="#VScode中配置C-x2F-C" class="headerlink" title="VScode中配置C&#x2F;C++"></a>VScode中配置C&#x2F;C++</h1><p>这是一个教程，（在windows 10中）为vscode配置C&#x2F;C++的运行环境。</p><h2 id="1-下载-VScode"><a href="#1-下载-VScode" class="headerlink" title="1.下载 VScode"></a>1.下载 VScode</h2><p>首先，去 <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> 下载对应操作系统的VScode，下载稳定版本。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/RZea1UrwmcYdODA.png"></p><h2 id="2-安装-VScode"><a href="#2-安装-VScode" class="headerlink" title="2.安装 VScode"></a>2.安装 VScode</h2><p>全选和默认安装。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/7ztxYewrKACLPhn.png"></p><h2 id="3-下载-Gcc编译工具"><a href="#3-下载-Gcc编译工具" class="headerlink" title="3.下载 Gcc编译工具"></a>3.下载 Gcc编译工具</h2><p>去 <a href="https://sourceforge.net/projects/mingw-w64/files/">https://sourceforge.net/projects/mingw-w64/files/</a> 下载mingw-w64,下面是Windows版本。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/tF6avNq89VO4noH.png"></p><h2 id="4-解压-Gcc"><a href="#4-解压-Gcc" class="headerlink" title="4.解压 Gcc"></a>4.解压 Gcc</h2><p>解压 gcc 到你喜欢的位置,例如C盘的根目录。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/IbtenwvsYdZES5y.png"></p><h2 id="5-配置环境变量"><a href="#5-配置环境变量" class="headerlink" title="5.配置环境变量"></a>5.配置环境变量</h2><p>为了让程序访问这些编译器，你需要添加gcc-bin文件夹的目录 (我的是 C: \mingw64 \ bin ,选择地址复制) 到用户变量Path中。<br><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/A9qKemdkTcujgO8.png"><br><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/HbkICMA7tT3hlOj.png"><br><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/QmwbOLZMJUp164y.png"><br><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/QzsNOWr8xq7HFL3.png"></p><p>现在证明一下是否配置成功，任意地方打开cmd，输入 gcc –version (中间有个空格), 点击确定, 如果看到如下的版本号，则证明配置成功。<br><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/m9JecMhb4jXY2xo.png"></p><h2 id="6-配置你的代码文件夹"><a href="#6-配置你的代码文件夹" class="headerlink" title="6.配置你的代码文件夹"></a>6.配置你的代码文件夹</h2><p>在你喜欢的地方建一个文件夹名为CODE_ C,在这个文件夹中,你能放入你的C语言程序。如果你想放入其他语言的程序，可以新建一个新的文件夹。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/Pz7CN6BZWlVRDSr.png"></p><p>在 CODE_C 文件夹中，你可以创建两个文件夹 C_Single 和 C_Multiple。前面一个可以放单个小项目，后面一个可以放复杂的大项目。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/7d8qEPgsAUG4lwL.png"></p><h2 id="7-配置VScode"><a href="#7-配置VScode" class="headerlink" title="7.配置VScode"></a>7.配置VScode</h2><p>打开你的VScode，并打开C_Single文件夹，新建如图文件夹和文件：</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/j1zDhbCVXqEt3H9.png"></p><p>launch.json:</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>//这个大括号里是我们的‘调试(Debug<span class="token punctuation">)</span>’配置            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span> // 配置名称            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span> // 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span> // 请求配置类型，可以为launch（启动）或attach（附加）            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&amp;#123;fileDirname&amp;#125;\\bin\\$&amp;#123;fileBasenameNoExtension&amp;#125;.exe"</span><span class="token punctuation">,</span> // 将要进行调试的程序的路径            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 程序调试时传递给程序的命令行参数，这里设为空即可            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 设为<span class="token boolean">true</span>时程序将暂停在程序入口处，相当于在main上打断点            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&amp;#123;fileDirname&amp;#125;"</span><span class="token punctuation">,</span> // 调试程序时的工作目录，此处为源码文件所在目录            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 环境变量，这里设为空即可            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 为<span class="token boolean">true</span>时使用单独的cmd窗口，跳出小黑框；设为<span class="token boolean">false</span>则是用vscode的内置终端，建议用内置终端            <span class="token property">"internalConsoleOptions"</span><span class="token operator">:</span> <span class="token string">"neverOpen"</span><span class="token punctuation">,</span> // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，新手调试用不到            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span> // 指定连接的调试器，gdb是minGW中的调试程序            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\mingw64\\bin\\gdb.exe"</span><span class="token punctuation">,</span> // 指定调试器所在路径，如果你的minGW装在别的地方，则要改成你自己的路径，注意间隔是\\            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"build"</span> // 调试开始前执行的任务，我们在调试前要编译构建。与tasks.json的label相对应，名字要一样    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>倒数第二个代码数据是你自己的gdb文件的位置，我的是 mingw64\bin\gdb.exe。</p><p>tasks.json:</p><pre class=" language-json"><code class="language-json">    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>//这个大括号里是‘构建（build）’任务            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span> //任务名称，可以更改，不过不建议改            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> //任务类型，process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"gcc"</span><span class="token punctuation">,</span> //编译命令，这里是gcc，编译c++的话换成g++            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    //方括号里是传给gcc命令的一系列参数，用于实现一些功能                <span class="token string">"$&amp;#123;file&amp;#125;"</span><span class="token punctuation">,</span> //指定要编译的是当前文件                <span class="token string">"-o"</span><span class="token punctuation">,</span> //指定输出文件的路径和名称                <span class="token string">"$&amp;#123;fileDirname&amp;#125;\\bin\\$&amp;#123;fileBasenameNoExtension&amp;#125;.exe"</span><span class="token punctuation">,</span> //承接上一步的-o，让可执行文件输出到源码文件所在的文件夹下的bin文件夹内，并且让它的名字和源码文件相同                <span class="token string">"-g"</span><span class="token punctuation">,</span> //生成和调试有关的信息                <span class="token string">"-Wall"</span><span class="token punctuation">,</span> // 开启额外警告                <span class="token string">"-static-libgcc"</span><span class="token punctuation">,</span>  // 静态链接libgcc                <span class="token string">"-fexec-charset=GBK"</span><span class="token punctuation">,</span> // 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码                <span class="token string">"-std=c11"</span><span class="token punctuation">,</span> // 语言标准，可根据自己的需要进行修改，写c++要换成c++的语言标准，比如c++<span class="token number">11</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  //group表示‘组’，我们可以有很多的task，然后把他们放在一个‘组’里                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>//表示这一组任务类型是构建                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>//表示这个任务是当前这组任务中的默认任务            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"presentation"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span> //执行这个任务时的一些其他设定                <span class="token property">"echo"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>//表示在执行任务时在终端要有输出                <span class="token property">"reveal"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span> //执行任务时是否跳转到终端面板，可以为always，silent，never                <span class="token property">"focus"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> //设为<span class="token boolean">true</span>后可以使执行task时焦点聚集在终端，但对编译来说，设为<span class="token boolean">true</span>没有意义，因为运行的时候才涉及到输入                <span class="token property">"panel"</span><span class="token operator">:</span> <span class="token string">"new"</span> //每次执行这个task时都新建一个终端面板，也可以设置为shared，共用一个面板，不过那样会出现‘任务将被终端重用’的提示，比较烦人            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token string">"$gcc"</span> //捕捉编译时编译器在终端里显示的报错信息，将其显示在vscode的‘问题’面板里        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        &amp;#<span class="token number">123</span><span class="token punctuation">;</span>//这个大括号里是‘运行(run<span class="token punctuation">)</span>’任务，一些设置与上面的构建任务性质相同            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"run"</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>             <span class="token property">"dependsOn"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span> //任务依赖，因为要运行必须先构建，所以执行这个任务前必须先执行build任务，            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"$&amp;#123;fileDirname&amp;#125;\\bin\\$&amp;#123;fileBasenameNoExtension&amp;#125;.exe"</span><span class="token punctuation">,</span> //执行exe文件，只需要指定这个exe文件在哪里就好            <span class="token property">"group"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span> //这一组是‘测试’组，将run任务放在test组里方便我们用快捷键执行                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token property">"presentation"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"echo"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"reveal"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>                <span class="token property">"focus"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> //这个就设置为<span class="token boolean">true</span>了，运行任务后将焦点聚集到终端，方便进行输入                <span class="token property">"panel"</span><span class="token operator">:</span> <span class="token string">"new"</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token punctuation">]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>第三行代码如果是配置C++的环境则改成g++（配置C++只有这一步与C不同，其他的跟配置C环境相同）。</p><h2 id="8-最后"><a href="#8-最后" class="headerlink" title="8.最后"></a>8.最后</h2><p>现在，你可以将vscode的快捷键设置为F4并编写C语言代码。按F4运行C语言代码，F5是dubug。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/kdxFJ2PjTeSAB4y.png"></p><p>运行C语言代码时，运行文件将显示在bin文件夹中。</p><p><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/MUfF5iXSkvT1hJW.png"></p><h2 id="现在开始你的编程之旅吧"><a href="#现在开始你的编程之旅吧" class="headerlink" title="现在开始你的编程之旅吧!"></a>现在开始你的编程之旅吧!</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客出现的问题</title>
      <link href="/2022/07/03/bo-ke-chu-xian-de-wen-ti/"/>
      <url>/2022/07/03/bo-ke-chu-xian-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="图片不显示"><a href="#图片不显示" class="headerlink" title="图片不显示"></a>图片不显示</h1><p>在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save</code></pre><p>如果npm下载太慢可以用cnpm install…代替。<br>安装cnpm，同时将cnmp使用淘宝镜像提高下载速度</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> cnpm -g<span class="token function">npm</span> <span class="token function">install</span> cnpm -g --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><p>同时在hexo中使用文章资源文件夹，在config.yaml文件中更改一下配置：</p><pre class=" language-bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span></code></pre><p>当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹，你可以把与该文章有关的任何文件放在该文件夹中，并在文章中用相对路径![]（.&#x2F;…）引用。</p><h1 id="备份问题"><a href="#备份问题" class="headerlink" title="备份问题"></a>备份问题</h1><p>一般我们hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。也就是上传的是在本地目录里自动生成的.deploy_git里面。<br>其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github,所以可以利用git的分支管理，将源文件上传到另一个分支即可。</p><h2 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h2><p>下图所示位置输入分支名并确认即可创建（我的分支名为source）<br><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/a3EcMRejTlP4WHC.png"><br>将刚才创建的分支设置为默认分支：<br><img src="themes/matery/source/medias/loading.gif" data-original="https://s2.loli.net/2022/08/03/pAekOq18VfCscYv.png"></p><h2 id="获取-git文件夹"><a href="#获取-git文件夹" class="headerlink" title="获取.git文件夹"></a>获取.git文件夹</h2><p>去任意地方把刚刚的source分支给clone下来</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/marshver/marshver.github.io</code></pre><p>然后把里面的.git文件夹剪切到博客的根文件夹中。</p><h2 id="主题文件无法上传"><a href="#主题文件无法上传" class="headerlink" title="主题文件无法上传"></a>主题文件无法上传</h2><p>如果你的博客里有主题文件夹（themes&#x2F;yourtheme），需要把主题文件夹的.git文件夹给删除，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的主题配置在别的电脑上就用不了了。</p><h2 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h2><p>博客文件打开git执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"Backup"</span><span class="token function">git</span> push origin <span class="token function">source</span></code></pre><p>这样就备份完博客的源文件，且在Github上能看到两个分支(master和source)。</p><h2 id="如想恢复博客请看“博客相关”中的恢复博客"><a href="#如想恢复博客请看“博客相关”中的恢复博客" class="headerlink" title="如想恢复博客请看“博客相关”中的恢复博客"></a>如想恢复博客请看“博客相关”中的恢复博客</h2><a href="/2022/07/01/bo-ke-xiang-guan/" title="博客相关">博客相关</a>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客相关</title>
      <link href="/2022/07/01/bo-ke-xiang-guan/"/>
      <url>/2022/07/01/bo-ke-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h1 id="个人备份习惯"><a href="#个人备份习惯" class="headerlink" title="个人备份习惯"></a>个人备份习惯</h1><pre class=" language-bash"><code class="language-bash">hexo clean<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"Backup"</span><span class="token function">git</span> pushhexo ghexo d</code></pre><h1 id="恢复博客"><a href="#恢复博客" class="headerlink" title="恢复博客"></a>恢复博客</h1><p>安装git、nodejs、hexo等等。。然后克隆项目到本地<br>输入下列命令克隆博客必须文件(hexo分支)</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/marshver/marshver.github.io</code></pre><p>在clone下来的那个文件夹里面执行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git</code></pre><p>最后可以执行如下代码就可以开始你的博客了</p><pre class=" language-bash"><code class="language-bash">hexo cleanhexo ghexo d</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
