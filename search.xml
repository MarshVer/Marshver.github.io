<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装旧版驱动</title>
      <link href="/2022/11/26/an-zhuang-jiu-ban-qu-dong/"/>
      <url>/2022/11/26/an-zhuang-jiu-ban-qu-dong/</url>
      
        <content type="html"><![CDATA[<ul><li><p>第三方网站下载：<a href="https://cn.driverscollection.com/?H=GeForce%20GTX%201050&amp;By=NVidia">https://cn.driverscollection.com/?H=GeForce GTX 1050&amp;By=NVidia</a></p></li><li><p>官网下载</p></li></ul><ol><li>英伟达官网-&gt; 驱动程序-&gt;GEFORCE驱动程序-&gt; 选择你的显卡型号<br><a href="https://www.nvidia.cn/geforce/drivers/">https://www.nvidia.cn/geforce/drivers/</a></li><li>按f12，点击Console或者控制台，右键 清除控制台/clear Console</li><li>粘贴下面代码，并回车</li></ol><pre class="line-numbers language-none"><code class="language-none">SystemScanner.prototype.DriverSearch &#x3D; function(psid, pfid, osID, langCode, whql, beta, dltype, numresults ) &#123;numresults&#x3D;100;this.scannerStatusUpdate(GFE_SERVER_CONNECTING);theScanner.scannedDevice.downloadInfo&#x3D;new Object();var parameters&#x3D;&#39;psid&#x3D;&#39;+psid;parameters+&#x3D;&#39;&amp;pfid&#x3D;&#39;+pfid;parameters+&#x3D;&#39;&amp;osID&#x3D;&#39;+osID;parameters+&#x3D;&#39;&amp;languageCode&#x3D;&#39;+langCode;parameters+&#x3D;&#39;&amp;beta&#x3D;&#39;+beta;parameters+&#x3D;&#39;&amp;isWHQL&#x3D;&#39;+whql;parameters+&#x3D;&quot;&amp;dltype&#x3D;&quot;+dltype;parameters+&#x3D;&quot;&amp;sort1&#x3D;0&quot;;parameters+&#x3D;&quot;&amp;numberOfResults&#x3D;&quot;+numresults;var requestUrl&#x3D;this.driverManualLookupUrl+parameters;this.driversLogUIEvent(&quot;warn&quot;,&quot;SUID:&quot;+this.tracker.scanID+&quot; BEGIN DriverSearch requestUrl:&quot;+requestUrl);this.debugTrace(requestUrl);jQuery.ajax(&#123;url:requestUrl,async:false,type:&#39;get&#39;,success:function(response)&#123;try&#123;theScanner.debugTrace(&quot;The Driver Lookup Service Returned:\n\n(&quot;+response+&quot;)&quot;);if(response.length&gt;0)&#123;theScanner.resetResults();var driverLookupJsonObj&#x3D;&#39;(&#39;+response+&#39;)&#39;;theScanner.resultsList&#x3D;new Object();theScanner.resultsList&#x3D;eval(driverLookupJsonObj)&#125;if(theScanner.resultsList.Success&#x3D;&#x3D;0)&#123;theScanner.scannerStatus&#x3D;&quot;No driver available&quot;&#125;else&#123;theScanner.scannerStatus&#x3D;&quot;Results Ready&quot;&#125;&#125;catch(e)&#123;this.driversLogUIEvent(&quot;error&quot;,&quot; FAIL catch DriverSearch&quot;);theScanner.resetResults();theScanner.scannerStatus&#x3D;&quot;No driver available&quot;&#125;&#125;,error:function(response)&#123;theScanner.resetResults();theScanner.scannerStatus&#x3D;&quot;AJAX Call failed&quot;&#125;&#125;);this.driversLogUIEvent(&quot;warn&quot;,&quot;SUID:&quot;+this.tracker.scanID+&quot; END DriverSearch requestUrl:&quot;+requestUrl);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>找到想下载的显卡驱动版本，点击下载即可</li><li>然后用ddu卸载 (或者其他方法彻底卸载）原来的显卡驱动，卸载过程会重启电脑</li><li>重启电脑后双击安装刚刚下载的显卡驱动即可</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 搞机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/09/09/shu-ju-jie-gou/"/>
      <url>/2022/09/09/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1>一、绪论</h1><h2 id="1-数据结构基本概念">1.数据结构基本概念</h2><ul><li>数据：数据是信息的载体，是所有能输入到计算机并被计算机程序识别和处理的符号的集合。</li><li>数据元素：数据元素是数据的基本单位，由若干数据项组成。数据项是构成数据元素的不可分割的最小单位。</li><li>数据对象：是具有相同性质的数据元素的集合，是数据的一个子集，如整数数据对象就是整数数据集。</li><li>数据类型： 是一个值的集合和定义在此集合上的一组操作的总称。有原子类型，结构类型和抽象数据类型。</li><li>抽象数据类型（ADT）:不讨论存储结构，只关心<strong>逻辑结构</strong>和<strong>数据的运算</strong>。</li><li>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</li></ul><p>一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。</p><ul><li>线性结构：1对1</li><li>树形结构：1对多</li><li>图状结构或网状结构：多对多</li></ul><p><strong>数据的存储结构：</strong> 顺序存储，链式存储，索引存储，散列存储。<br><strong>数据结构的三要素：</strong> 逻辑结构，存储结构，数据的运算。<br>可以用抽象数据类型定义一个完整的数据结构<br>数据的逻辑结构独立于其存储结构，而存储结构是逻辑结构在计算机上的映射，不能独立与逻辑结构而存在。<br>链式存储设计时，各个不同结点的存储空间可以不连续，但结点内的存储单元必须连续。</p><h2 id="2-算法">2.算法</h2><p>算法是对特定问题求解步骤的一种描述，他是指定的有限序列。<br>算法的5个特性：有穷性，确定性，可行性，输入和输出。<br>好的算法要求：正确性，可读性，健壮性和效率与低存储量需求。<br><strong>越高级的语言执行效率越低。</strong><br>一般考虑最坏情况下的复杂度。<br>$O（1） &lt; O（log_2n）&lt; O（n）&lt; O（nlon_2n）&lt; O（n^2）&lt; O（n^3）&lt; O（2^n）&lt; O（n!）&lt; O（n^n）（常对幂指阶依次增大）$<br>算法原地工作是指辅助空间是常量。<br>时间复杂度是指渐进时间复杂度，指的是整体的效率，不能带入常量比较大小，即常对幂指阶效率必然逐渐递减。<br>斐波那契数列：该项等于前面两项之和：0，1，1，2，3，5…</p><h1>二、线性表</h1><h2 id="1-线性表的定义和基本操作">1.线性表的定义和基本操作</h2><p>线性表中的元素个数有限，有其先后顺序，数据类型都相同（占用相同大小的存储空间），具有抽象性。</p><h2 id="2-线性表的顺序表示（顺序表）">2.线性表的顺序表示（顺序表）</h2><p>顺序表逻辑上相邻，物理上也相邻，常用数组表示线性表。<br>注：线性表的位序从1开始，而数组的元素下标从0开始。</p><p>线性表可以随机存取，随机访问，按位查找的时间复杂度为O（1），但插入和删除元素要移动大量元素。</p><p>顺序表存储密度高，每个节点只存储数据元素。</p><table><thead><tr><th>操作</th><th>平均时间复杂度</th><th>平均次数</th></tr></thead><tbody><tr><td>插入</td><td>$O（n）$</td><td>n/2</td></tr><tr><td>删除</td><td>$O（n）$</td><td>$（n-1）/2$</td></tr><tr><td>按值查找</td><td>$O（n）$</td><td>$（n+1）/2$</td></tr></tbody></table><p>顺序表满需要扩容时，是复制该顺序表的内容到一个新的（m+n）个连续地址块的地址上。</p><h2 id="3-线性表的链式表示（链表）">3.线性表的链式表示（链表）</h2><p>单链表逻辑结构相邻，物理结构不相邻。Data数据域，next存放后继结点的地址，存在浪费空间的缺点，是非随机存取。</p><p>通常用一个头指针来标识一个单链表，头指针为null时表示一个空表。为了操作方便，在单链表第一个结点之前附加一个结点，称为头结点。头结点数据域可以不存放任何数据，也可以存放链表长度等记录。</p><table><thead><tr><th>单链表操作</th><th>方法</th><th>描述</th><th>时间复杂度</th></tr></thead><tbody><tr><td>建立链表</td><td>头插法</td><td>每次将S所指结点插在最前端。</td><td>$O（n）$</td></tr><tr><td></td><td>尾插法</td><td>每次将S所指结点插在最末端。</td><td>$O（n）$</td></tr><tr><td>查找链表</td><td>按序号查找</td><td>第一个节点出发序号依次加1，没找到返回null</td><td>$O（n）$</td></tr><tr><td></td><td>按值查找</td><td>第一个节点出发按值查找，没找到返回null</td><td>$O（n）$</td></tr><tr><td>插入结点</td><td>按序查找</td><td>按需查找第i-1个结点，用两个指针分别指向i和i-1结点*P和*S;P-&gt;next=S-&gt;next；S-&gt;next=P</td><td>$O（n）$</td></tr><tr><td>删除结点</td><td>按序查找</td><td>按序查找第i-1个结点，用两个指针分别指向i和i-1结点*P和*S;S-&gt;next=P-&gt;next；free（P）</td><td>$O（n）$</td></tr><tr><td>求表长</td><td>按序查找</td><td>表长是指表的数据结点的个数，不包含头结点</td><td>$O（n）$</td></tr></tbody></table><p>删除结点*P，一般需要查找到其前驱结点在删除，这时时间复杂度O（n）；但还可以将该结点的后继节点的数据域放到该结点内，再删除下一节点，这时时间复杂度为O（1）</p><p><strong>双链表：</strong> 在单链表的基础上增加了前驱结点指针prior。</p><table><thead><tr><th>双链表操作</th><th>描述</th><th>注意点</th></tr></thead><tbody><tr><td>插入</td><td>*P之后插入*S；S-&gt;next=P-&gt;next；P-&gt;next-&gt;prior=S；S-&gt;prior=P；P-&gt;next=S</td><td>前两个操作必须在第四个操作前</td></tr><tr><td>删除</td><td>删除*p的后继节点*q；p-&gt;next=q-&gt;next；q-&gt;next-&gt;prior=p;Free（q）</td><td></td></tr></tbody></table><p><strong>循环链表：</strong></p><table><thead><tr><th>循环链表类型</th><th>说明</th><th>时间复杂度</th></tr></thead><tbody><tr><td>循环单链表</td><td>最后一个结点的指针不是null，而是头结点；判断链表是否为空不是头结点指针指向null，而是指向头指针</td><td>头指针：对表尾操作为$O（n）$；尾指针：对表头和表尾操作都为$O（1）$</td></tr><tr><td>循环双链表</td><td>头结点的prior还要只想表尾结点；判断链表为空，其头结点的prior域和next域都等于头指针</td><td></td></tr></tbody></table><p><strong>静态链表：</strong> 借助数组来描述线性表的链式存储结构，也有数据域data和指针域next，这里的next指的是相对位置（数组下标），又称游标，与顺序表逸一样需要预先分配一块连续的内存空间。以next=-1为结束标志。</p><p>删除循环单链表的第一个结点，一般不需要改变尾指针；但若该链表只有一个结点，即删除的是尾结点，尾指针需要指向头指针</p><h1>三、栈、队列和数组</h1><h2 id="1-栈">1.栈</h2><p>栈定义：栈是一种线性表，但限定只能在一端进行插入或删除操作（后进先出）<br>卡兰特数：$\frac {1}{n+1} C_{2n}^{n}$ 是n各不同元素入栈，出站的不同排列数量</p><p><strong>顺序栈</strong><br>顺序栈采用顺序存储方式，一组连续的存储单元存放自栈底到栈顶的数据元素，附设一个栈顶指针top</p><table><thead><tr><th>初始化条件</th><th>说明</th><th>进栈</th><th>出栈</th></tr></thead><tbody><tr><td>top=-1</td><td>栈顶指针指向栈顶元素</td><td>S.data（++top）</td><td>X=S.data（top++）</td></tr><tr><td>top=0</td><td>栈顶指针指向栈顶元素的下一个元素</td><td>S.data（top++）</td><td>X=S.data（++top）</td></tr></tbody></table><p><strong>共享栈：</strong> 利用栈底位置相对不变的特性，用两个顺序栈共享一个一维数组空间。栈底为该空间的两端，栈顶向中间延伸。Top0=-1时0号栈为空；Top1=maxsize时，1号栈为空；当top1-top0=1时判断为栈满；进栈</p><table><thead><tr><th>初始化条件</th><th>栈空</th><th>栈满</th><th>进栈</th><th>出栈</th></tr></thead><tbody><tr><td>Top0=-1</td><td>Top0=-1</td><td>Top1-Top0=1</td><td>先+1再赋值</td><td>先出栈再-1</td></tr><tr><td>Top1=maxsize</td><td>Top1=maxsize</td><td></td><td>先-1再赋值</td><td>先出栈再+1</td></tr></tbody></table><p><strong>链栈：</strong> 采用链式存储结构，不存在栈满，所有操作在表头实现，栈顶可以没有头结点，头指针指向栈顶元素。有头结点出入栈操作不同。Top指针跟随栈顶移动，每插入一个元素移动一次。</p><h2 id="2-队列">2.队列</h2><p>队列简称队，操作受限的线性表，只允许一端插入，另一端删除，先进先出，队首/头删除，队尾插入。</p><p><strong>队列的顺序存储：</strong> 队头指针front和队尾指针rear（可能指向队尾下一个元素）</p><table><thead><tr><th>初始状态</th><th>Front=rear=0</th></tr></thead><tbody><tr><td>进队操作</td><td>队尾取值再＋1</td></tr><tr><td>出队操作</td><td>对头取值再+1</td></tr></tbody></table><p>顺序存储存在假溢出，不太实用</p><p><strong>循环队列：</strong> 将顺序队列臆造为一个环状的空间，把存储队列的元素的表从逻辑上视为一个环。<br>判断队满的三个方式：</p><table><thead><tr><th>牺牲一个单元</th><th>当队头指针在队尾指针的下一位置则满</th></tr></thead><tbody><tr><td>增设元素个数记录</td><td>Size=0则队空；size=maxsize则满</td></tr><tr><td>增设tag数据成员</td><td>Tag=0，删除导致front=rear，则为队空Tag=1，插入导致front=rear，则队满</td></tr></tbody></table><p><strong>队列的链式存储（链队列）：</strong> 实际上是同时带有队头指针和队尾指针的单链表，头指针指向队头结点，尾指针指向队尾结点</p><p>Front=null且rear=null时，链式队列为空。插入第一个结点时，front和rear都指向这个结点（可添加头结节，当队列为空时都指向头结点，插入第一个结点时front指向头结点，rear指向新插入的结点）</p><p><strong>双端队列：</strong> 允许两端都可以进行入队和出队的操作，也可进一步分为输出受限和输入受限的双端队列<br>出队或入队都是相应的指针＋1取最大值的余数</p><h2 id="3-栈和队列的应用">3.栈和队列的应用</h2><p><strong>栈在括号匹配中的应用：</strong> 左括号压入栈，右括号则与栈顶括号匹配；最后匹配完判断是否栈空。<br><strong>栈在表达式求值中的应用：</strong> 后缀表达式操作数和运算符分别入栈；操作数直接入栈，运算符先入栈的与后入栈的比较，若前者优先级高则出栈运算，反之入栈等待。<br><strong>栈在递归中的应用：</strong> 外层递归先入栈，内层递归后入栈，最后内层递归先出栈运算。递归的效率低下但代码简单，容易理解。<br><strong>栈的其他应用：</strong> 二进制转换，迷宫求解</p><p><strong>队列在层次遍历中的应用：</strong> 根节点出队，左孩子和右孩子依次入队<br><strong>队列在计算机系统中的应用：</strong> 主机与外部设备之间速度不匹配的问题（打印机缓冲区）；多用户引发的资源竞争问题<br><strong>队列的其他应用：</strong> 页面替换算法</p><h2 id="4-数组">4.数组</h2><p>定义：由n（n≥1）个相同类型的数据元素构成的有序序列<br>数组除结构的初始化和销毁外，只有存取元素和修改元素的操作<br>数组的存储结构：行优先和列优先</p><p><strong>特殊矩阵的压缩存储：</strong><br>压缩存储：多个值相同的元素只分配一个存储空间，对零元素不分配存储空间，目的是节约存储空间<br>将一个二维数组（i，j）存放在一个一维数组（k）中</p><p><strong>对称矩阵：</strong> $kmax=[n（n+1）]/2$<br>下三角阵：$K=1+2+3+…+（i-1）+（j-1）$（下标从0开始）<br>上三角阵：上述表达式i与j互换即可求出</p><p><strong>下三角矩阵：</strong> $kmax=[n（n+1）]/2+1$<br>下三角阵：$K=1+2+3+…+（i-1）+（j-1）$<br>上三角阵：$k=[n（n+1）]/2$ （最后一个元素）</p><p><strong>上三角矩阵：</strong> $kmax=[n（n+1）]/2+1$<br>上三角阵：$k=n+（n-1）+（n-2）+…+（n-i+2）+（n-i+1）-1$<br>下三角阵：$k=[n（n+1）]/2$ （最后一个元素）</p><p><strong>三对角矩阵:</strong><br>K=2i+j-3（1≤i，j≤n，| i-j |≤1）</p><p><strong>稀疏矩阵:</strong><br>稀疏矩阵三元组（i，j及其非零值）可以采用数组存储或者十字链表存储<br><strong>十字链表：</strong> 每个元素包含三元组以及指向同行下一个元素和同列下一个元素的两个指针<br>稀疏矩阵压缩存储失去了随机存取特性</p><h1>四、串</h1><h2 id="1-串的存储结构">1.串的存储结构</h2><p><strong>定长顺序存储</strong><br>用一组连续的存储单元存储串值的字符序列，即定长数组<br><strong>堆分配存储</strong><br>仍用一组连续的存储单元存储串值，但存储空间可动态分配<br>在C语钟存在一个称之“堆”的自由存储区，用malloc（）和free（）函数来动态存储管理<br><strong>块链存储表示</strong><br>类似于线性表的链式存储结构，每个结点既可以存放一个字符，也可以存放多个字符，每个结点称为块</p><h2 id="2-串的摸式匹配">2.串的摸式匹配</h2><ul><li><strong>简单的摸式匹配算法（O（nm））</strong><br>匹配失败，指针后退重新开始匹配，i=i-j+2，j=1，时间复杂度为O（nm）</li><li><strong>KMP算法</strong><br>next（j）数组为摸式串每一个字符设置一个数量，为最大公共前后缀数量+1<br>next（1）=0，为了区分其他字符，因为只有第一个字符匹配失败需耍将指针移到主串下一位置</li><li><strong>KMP算法实现思想（$O（m+n）$）</strong><br>比较当前值与公共前缀后一位进行比较，相同则next[j+1]=j+1；不用则与第j位的公共前缀进行比较，以此类推（类似于二分法）</li><li><strong>next数组优化nextval</strong><br>若next[j]字符与当前符相同，则修改next[j]=next[next[j]]</li></ul><h1>五、树与二叉树</h1><h2 id="1-树的概念">1.树的概念</h2><p>树是n（n≥0）个结点的有限集，n=0为树<br>结点数=结点的度数+1<br>$n_0+n_1+n_2+…+n_n=n_1+2n_2+…+nn_n+1$</p><h2 id="2-二叉树">2.二叉树</h2><p>二叉树可以为空，而度为2的树至少有3个结点</p><p>几个特殊的二叉树</p><ul><li><strong>满二叉树</strong><br>高度为h，含有$2^h$-1个结点，每层有$2^{h-1}$结点，叶子结点集中在最下一层，只有度为0或2的结点，编号为i的结点左孩子为2i，右孩子为2ⅰ+1</li><li><strong>完全二叉树</strong><br>若有度为1的结点，则只可能有1个，且该结点只有左孩子，没有右孩子</li><li><strong>二叉排序树</strong><br>左子树&lt;根结点&lt;右子树</li><li><strong>平衡二叉树</strong><br>树上任一结点左右子树的深度之差不超过1</li></ul><p><strong>二叉树的性质</strong></p><ul><li>$n_0=n_2+1$</li><li>$n_1=0或1$</li><li>双亲结点为i/2向下取整</li><li>结点i所在层次$\log _ { 2 } i$向下取整+1</li></ul><p><strong>二叉树的存储结构</strong><br>顺序存储结构:适合存储完全二叉树知满二叉树（建议从数组下标1开始存储）<br>链式存储结构:二叉树一般采用链式存储，二叉链表一般包含3个域:数据域data、左指针域lchild和右指针域rchild<br>在含有n个结点的二叉链表中，含n+1个空链域</p><h2 id="3-二叉树的遍历">3.二叉树的遍历</h2><p><strong>二叉树的遍历</strong></p><ul><li>先序遍历$（根→左→右）$栈</li><li>中序遍历$（左→根→右）$栈</li><li>后序遍历$（左→右→根）$栈</li><li>层次遍历$（队列）$</li></ul><p>先序，中序和后序属于深度优先算法，利用了辅助工作栈。<br>先序是访问后入栈，中序是出找后访问。故先序是入栈序列，中序则是出栈序列</p><h2 id="4-线索二叉树">4.线索二叉树</h2><p><strong>基本概念</strong><br>利用链式存储二叉树的空指针来存放指向其前驱和后继的指针，加快了查找结点前驱和后继的速度<br>若无左子树，lchⅰld指向其前驱结点；若无右子树，rchild向后继结点<br>引入ltag和rtag标识指针域是指向左（右）孩子（0）还是前驱（后继）（1）</p><p><strong>中序线索二叉树的遍历</strong><br>先找到第一个结点，然后依次找结点的后继，直至后继为空</p><h2 id="5-树，森林">5.树，森林</h2><p><strong>树的存储结构</strong></p><ul><li>双亲表示法<br>连续空间存储，增设一个伪指针指方其双亲结点在数组中的位置<br>根结点下标为o，其伪指针为-1<br>客易寻找双亲结点，但寻找孩子结点需要遍历整个结构</li><li>孩子表示法<br>将每个结点的孩子结点都用都用单链表连接起来，每个结点都有一个孩子链表<br>寻找子女非常方便，寻找双亲需要遍历n个结点的n个孩子链表</li><li>孩子兄弟表示法（二叉树表方法）<br>二叉链表作为树的存储结构，每个结点包括节点值，指向第一个孩子的结点指针和指向结点下一个兄弟的结点指针<br>这种存储比较灵话，最大的优点是可以方便实现树与二叉树的转换，易于查找结点的孩子等</li></ul><p><strong>树、森林与二叉树的转换</strong></p><ul><li>左孩子右兄弟（左孩子依然是左孩子，右兄弟变为右孩子）</li><li>树转换成二叉树:步骤:①兄弟结点之间加一条线②保留第一个孩子，与其他孩子的连线抹掉③以树根为中心顺时针旋转45°</li><li>森林转换成二叉树:①将每棵树都转换成二叉树②每棵树的根都视作兄弟用一根线连线（全部视为右孩子）③以第一棵树根为中心顺时针旋转90°（第一棵树转换成左子树，剩余森林转换成右子树）</li><li>二叉树转换成森林:二叉树非空，则二叉树的根及左子树视为第一棵树，直到最后只剩一棵没有存子树对止，最后将二叉树转换成树即可</li></ul><p><strong>树与森林的遍历</strong></p><ul><li>树的遍历<br>先根遍历:遍历序列与对应二叉树的先序遍历相同<br>后根遍历:遍历序列与对应二叉树的相同</li><li>森林的遍历<br>先序遍历:①访问第一棵树的根节点②先序遍历第一棵树中根节点的子森林③先序遍历除第一棵树之后剩余的树构成的森林<br>中序遍历:①中序遍历第一棵树根结点的子树森林②第一棵树根结点③中序遍历剩余的树构成的森<br>对应二叉树的先序遍历和中序遍历</li></ul><h2 id="6-树与二叉树的应用">6.树与二叉树的应用</h2><p><strong>哈夫曼树和哈夫曼编码</strong></p><ul><li>带权路经长度:WPL=Σwl，w为叶结点的权重，l为路径长度（从根到该结点经过的边数）</li><li>带权路经长度最短的<strong>二叉树</strong>即为哈夫曼树</li><li>哈夫曼树的构造:选择两个权重最小的结合构成一个二叉树，权重为右孩子权重和；以以类推</li><li>哈夫曼树是最优（严格）二（m）叉树,只有度为0和2（m）的结点，即$n_0+n_2（或n_m）=2n_2（或mn_m）+1$</li><li>哈夫曼编码:0表示左子树，1表示右子树（或相反，没有规定）<br>固定长度编码（每个字符的编码等长），可变长度编码（每个字符的编码可不等长）<br>前缀编码:没有一个编码是另一个编码的前缀<br>利用哈夫曼树可设计出总长度最短的二进制前缀编码</li></ul><p><strong>并查集</strong></p><ul><li><p>每个集合一棵树表示存储</p></li><li><p>使用双亲表示法（利用数组顺序存储，数组值为双亲结点的数组下标，根结点数组值为-1）：容易找到根结点</p></li><li><p>并（Union）:将根结点指向被合并的根结点</p></li><li><p>查（Find）:查找到该结点所属的根结点即可</p></li><li><p>初始化（Initial）:初始化查集，将所有数组元素初始化为-1</p></li></ul><p><strong>并查集的进一步优化</strong></p><ul><li>Find操作的优化，压缩路径<br>先找到根结点，再将经过的路径全部都挂到根结点上</li><li>Union优化<br>小树合到大树，这样合并后的树高度不会变大。将根结点的值设为树高的相反数</li></ul><h1>六、图</h1><h2 id="1-图的基本概念">1.图的基本概念</h2><ul><li>有向图:v指向u，&lt;v，u&gt;，v为弧尾，u为弧头<br>ID（v）:入度，以顶点v为终点的边的个数<br>OD（ⅴ）:出度，以顶点v为起点的边的个数<br>TD（v）=入度+出度</li><li>无向图:（v，u）<br>TD（ⅴ）:顶点v的度，依附于该顶点的边的条数<br><br></li><li>简单图:①不存在重复的边②不存在顶点到自身的边</li><li>多重图:与简单图相对，都存在和无向<br><br></li><li>路径，回路，简单路经，简单回路，路径长度</li><li>点到点的距离:最短路径长度，若在在路径则长度为∞<br><br></li><li>连通:无向图中，v到w存在路径</li><li>强连通:有向图中，v到w和w到ⅴ都有路经<br><br></li><li>连通图:无向图中，任意两个顶点都连通（最少有n-1条边）</li><li>强连通图:有向图中，任意两个顶点都强连通（最少有n条边）<br><br></li><li>子图:取出任意个顶点和顶点相关的边构成的图</li><li>生成子图:取出全部顶点和任意条边（不一定构成图）<br><br></li><li>极大连通分量：无向图中的极大连通子图</li><li>强连通分量：有向图中的极大强连通子图<br><br></li><li>生成树：连通图（无向图）的生成树包括图中的全部顶点的一个极小连通子图（有n个顶点则必有n-1条边），若砍去它的一条边，则会变成非连通图；加上一条边，则会变成一个回路</li><li>生成森林：在非连通图中，连通分量的生成树构成了非连通图的生成森林<br><br></li><li>边的权、带权图/网、带权路径长度</li><li>无向完全图、有向完全图、稀疏图、稠密图</li><li>树:不存在回路、且连通的无向图</li><li>有向树:一个顶点的入度为0，其余顶点的入读均为1的有向图</li></ul><h2 id="2-图的存储及基本操作">2.图的存储及基本操作</h2><p><strong>邻接矩阵法</strong></p><ul><li>用一个一维数组存储图中各顶点的信息，用一个二维数组（顶点数*顶点数）存储各顶点的邻接关系</li><li>无向图邻接矩阵为对称矩阵，规模较大时可采用压缩存储<br><br></li><li>无向图：度为i行1的个数</li><li>有向图：度为i行+i列1的个数<br><br></li><li>稠密图适合用邻接矩阵</li><li>$A^n[i][j]$，表示从i到j，路径长度为n路径的数目</li></ul><p><strong>邻接表法</strong></p><ul><li>图的邻接表法结合了顺序存储和链式存储，适合存储稀疏矩阵</li><li>顶点表：data和firstarc</li><li>边表：adjvex和nextarc</li><li>每个顶点都有一个链表，存储的是以该顶点为顶点的边的另一顶点（有向图是以该顶点为出度的边的另一顶点）</li><li>寻找一个顶点入度的顶点很难</li></ul><p><strong>十字链表法</strong></p><ul><li>有向图的链式存储</li><li>数据结构：<br>弧结点：tailvex（弧尾）、beadvex（弧头）、hlink（下一个弧头）、tlink（下一个弧尾）、info（相关信息）<br>顶点结点：data（数据）、firsttil（该弧作为弧头的第一个弧结点）、firstout（该弧作为弧尾的第一个弧结点）<br>沿着firsttil可以找到以该顶点为最终目的地的所有路径<br>沿着firstout可以找到以该顶点为起点的所有路径<br><br></li><li>十字链表法：1，2，3，4四个指针域<br>1和2表示1指向2的弧，4指向顶点节点的另一条出度直到^（从顶点域第二个域firstout开始），3指向在哪些结点的2是自己结点（即自己是哪些结点的入度，从顶点第一个域firsttil开始）<br><a href="https://www.bilibili.com/video/BV1hV411t7SC?spm_id_from=333.880.my_history.page.click&amp;vd_source=d6171ece387ad032b9676729d086d450">https://www.bilibili.com/video/BV1hV411t7SC?spm_id_from=333.880.my_history.page.click&amp;vd_source=d6171ece387ad032b9676729d086d450</a></li></ul><p><strong>邻接多重表</strong></p><ul><li>无向图的链式存储</li><li>优化邻接表对边执行删除等操作时效率较低</li><li>类似于十字链表法<br><a href="https://www.bilibili.com/video/BV1TL411b7V3?spm_id_from=333.880.my_history.page.click&amp;vd_source=d6171ece387ad032b9676729d086d450">https://www.bilibili.com/video/BV1TL411b7V3?spm_id_from=333.880.my_history.page.click&amp;vd_source=d6171ece387ad032b9676729d086d450</a></li></ul><h2 id="3-图的遍历">3.图的遍历</h2><p>定义:从一个顶点出发，对图中所有顶点访问一次且仅访问一次</p><p><strong>广度优先搜索（BFS）（队列）</strong></p><ul><li>广度优先类似于二叉树的层序遍历算法</li><li>visited数组防止重复访问、</li><li>当各边权值相等时，BFS可以解决单源最短路径问题</li><li>性能分析</li></ul><table><thead><tr><th>存储结构</th><th>空间复杂度（辅助队列）</th><th>时间复杂度</th></tr></thead><tbody><tr><td>邻接矩阵</td><td>O（|V|）</td><td>O（$V^2$）</td></tr><tr><td>邻接表</td><td>O（|V|</td><td>O（|V|+|E|）</td></tr></tbody></table><p>注：V是点数，E是边数</p><ul><li>广度优先生成树：<br>邻接矩阵表示唯一，则广度优先生成数唯一；、<br>邻接表法表示不唯一，则广度优先生成树不唯一</li></ul><p><strong>深度优先搜索（DFS）（栈）</strong></p><ul><li>类似于二叉树的先序遍历</li><li>性能分析</li></ul><table><thead><tr><th>存储结构</th><th>空间复杂度（递归工作栈）</th><th>时间复杂度</th></tr></thead><tbody><tr><td>邻接矩阵</td><td>O（|V|）</td><td>O（$V^2$）</td></tr><tr><td>邻接表</td><td>O（|V|</td><td>O（|V|+|E|）</td></tr></tbody></table><ul><li>若有向图不连通，则会生成生成森林</li></ul><p><strong>图的遍历与图的连通性</strong></p><ul><li>图的遍历可以判断图的连通性</li><li>无向图连通，有向图强连通才能一次遍历到所有的顶点</li></ul><h2 id="4-图的应用">4.图的应用</h2><p><strong>最小生成树（MST）</strong></p><ul><li>包括图中的全部顶点和尽可能少的边</li><li>所有带权连通无向图的生成树中权值之和最小的生成树（可能有多个）</li></ul><p>1.Prim算法<br>从某个顶点开始构建生成树，依次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止<br>2.Kruskal算法<br>每次选择一条权值最小的边，使这条边的两头连接（原本已连接的不选），直到所有结点都连通</p><p>算法比较：</p><table><thead><tr><th>算法</th><th>时间复杂度</th><th>适合场景</th></tr></thead><tbody><tr><td>Prim</td><td>$O（V^2）$</td><td>边稠密图</td></tr><tr><td>Kruskal</td><td>$O（|E|log_2|E|$）</td><td>边稀疏而顶点较多图</td></tr></tbody></table><p><strong>最短路径问题</strong><br>1.Dijkstra算法</p><ul><li>求解带权有向图（或无向图）单源最短路径</li><li>时间复杂度$O（V^2）$</li><li>不适用于有负权值的带权图</li></ul><p>2.Floyd算法</p><ul><li>求出每一对顶点之间的最短路径</li><li>依次加入顶点1，2…n为中转站，找出最短路程</li><li>时间的复杂度$O（|V|^3）$</li><li>空间的复杂度$O（|V|^2）$</li><li>可以用于负权值的带权图</li><li>不能解决带有负权回路的带权图</li></ul><p><strong>有向无环图（DAG）的应用</strong><br>1.描述表达式</p><ul><li>合并表达式中的重复值（二叉树指向相同的值（每个数都要出现一次））</li></ul><p>2.拓扑排序</p><ul><li>AOV网：用顶点表示活动的网（做一件事的操作顺序）（有向图表示各个事件的先后顺序）</li><li>依次删除入度为0的顶点，直到AOV网为空（或当前网中不存在入度为0的顶点）</li><li>可用于验证网是否有回路</li><li>邻接矩阵存储，时间复杂度为$O（V^2）$<br>邻接表存储，时间复杂度为$0（|V|+|E|）$</li></ul><p>3.逆拓扑排序</p><ul><li>与拓扑排序相反，依次删除出度为0的顶点</li><li>拓扑排序和逆拓扑排序都不唯一</li></ul><p><strong>关键路径（运筹学</strong>）</p><ul><li>AOE网：顶点表示事件，有向边表示活动，边上的权值表示完成该活动的开销</li><li>关键路径：完成一个流程的最短时间</li><li>最早发生时间：正向</li><li>最迟发生时间：逆向</li></ul><h1>七、查找</h1><h2 id="1-查找基本概念">1.查找基本概念</h2><ul><li>静态查找:①查询特定数据元素②查找满足条件的数据元素</li><li>动态查找：在静态查找的基础上加上③插入一个数据元素④删除某个数据元素怒</li><li>查找的使用范围</li></ul><table><thead><tr><th>查找类型</th><th>查找方法</th></tr></thead><tbody><tr><td>静态查找</td><td>顺序查找、折半查找、散列查找等</td></tr><tr><td>动态查找</td><td>二叉排序树的查找、散列查找等</td></tr></tbody></table><ul><li>平均查找长度：$ASL=P_iC_i（i从1到n求和）$，P是查找元素i的概率（一般认为查找概率相同，即$P=\frac{1}{n}$），C是找到元素i所需比较的次数</li></ul><h2 id="2-顺序查找和折半查找">2.顺序查找和折半查找</h2><p><strong>顺序查找</strong></p><ul><li>适用于顺序表和链表</li></ul><p>（1）一般线性表的顺序查找</p><ul><li>从一端查找到另一端</li><li>在数组下标为0处引入哨兵（值取表中没有的值），可以不必判断数组是否越界，当值为哨兵时，一定会退出循环</li><li>$ASL_{成功}=\frac{n+1}{2}$</li><li>$ASL_{不成功}=n+1$</li><li>若能预知表中记录的概率，应按从大到小的顺序排列，ASL会减小</li></ul><p>（2）有序表的顺序查找</p><ul><li>若从小到大排列，则当需要查找的数据大于某个顶点时退出查找</li><li>$ASL_{成功}=\frac{n+1}{2}$</li><li>$ASL_{不成功}=\frac{n}{2} +\frac{n}{n+1}$</li></ul><p><strong>折半查找</strong></p><ul><li>适用于有序的顺序表</li><li>若值大于mid值，则low=mid+1，high不动</li><li>若值小于mid值，则high=mid-1，low不动</li><li>mid=（low+high）/2或者mid=（low+high）/2+1（一个算法的向上还是向下取整是一定的）</li><li>当low＞high时退出循环</li><li>折半查找的过程可描述成判定树，是个平衡二叉树</li><li>二叉排序树最优解是折半查找的平衡二叉树</li><li>判定树叶子节点是查找失败的数据范围（方形），比较次数最多不超过树的高度</li><li>$ASL_{成功}=log_2（n+1）-1$,时间复杂度为：O（$log_2n$）</li></ul><p><strong>分块查找（索引顺序查找）</strong></p><ul><li>吸取了顺序查找和折半查找的优点，既有动态结构有能快速查找</li><li>将查找表分为若干子块，块内元素可以无序，块间元素必须有序</li><li>块间按块内最大关键字的大小从小到大排序</li><li>步骤：①在索引表中确定关键字所在块（可以顺序查找，也可以折半查找）②块内顺序查找</li></ul><p>注：</p><ul><li>当各数据查找概率不同时，折半查找法不一定比顺序查找更优，反而按概率从大到小排列的顺序查找更优，或者利用二叉排序树</li></ul><h2 id="3-树形查找">3.树形查找</h2><p><strong>二叉排序树（BST）</strong></p><ul><li>左子树结点值＜根结点结点值＜右子树结点值</li><li>中序遍历是有序序列</li><li>不同的排序序列得到的二叉排序树不一定相同</li><li>叶子节点处插入</li><li>删除结点：<br>①叶子节点，直接删除<br>②只有左子树或右子树，则删除后用左子女或右子女代替<br>③左子树和右子树均不为空，则删除后用右子树最小的结点代替（右子树中序遍历第一个结点）/或者用左子树最大的结点代替（左子树中序遍历最后一个节点）</li></ul><p><strong>平衡二叉树（AVL）</strong></p><ul><li>左子树和右子树深度之差不超过1</li><li>平衡因子=左子树高-右子树高</li><li>平衡二叉树的插入：调整第一个不平衡的结点为根的树（最小不平衡子树）</li><li>插入调整：<br>LL：右旋<br>RR：左旋<br>LR：R左旋，L右旋<br>RL：L右旋，R左旋<br>注：不论删除的是叶结点还是非叶节点，在插入相同的结点，与之前的AVL可能相同也可能不相同</li></ul><p><strong>红黑树</strong></p><ul><li>由于平衡二叉树的插入和删除很容易破坏平衡特性，需要频繁调整。而红黑树的插入和删除很多时候不会破坏“红黑”特性，即便破坏也在常数级时间内完成调整</li><li>平衡二叉树适用于以查为主，而红黑树适用于频繁插入、删除的场景</li><li>红黑树是一种二叉排序树：左子树结点值＜根结点结点值＜右子树结点值</li><li>红黑树要求：①根节点是黑色②叶节点（外部节点、NULL结点、失败结点）均是黑色③不存在两个相邻的红结点④每个结点到任一空叶节点的简单路径上的黑节点数目相同</li><li>黑高bh：该结点到空叶节点的黑结点数</li><li>红黑树的性质：①从根节点到叶结点的最长路径不大于最短路径的2倍②有n个内部节点的红黑树高度h≤$2log_2（n+1）$</li><li>红黑树的查找与二叉排序树和平衡二叉树一样</li><li>红黑树的插入：<br>①先查找，确定插入位置<br>②新节点是根–染为黑色<br>③新节点是非根–染为红色<br>④若插入新节点满足红黑树定义，则插入结束；反之，需要调整<br>调整：①叔叔是黑色的：LL,RR,LR,RL与AVL相同同时需要染色（父爷结点颜色取反）<br>②叔叔是红色的：染色+变新<br>（叔父爷取反色，爷爷视为新结点重新调整）</li></ul><h2 id="4-B树和B-树">4.B树和B+树</h2><ul><li>B树又称多路平衡查找树，叶子结点为失败结点，最后一层数据称为终端结点</li><li>定义:设m阶B树①至多m个分支，m-1个关键字②若根结点不是终端结点，则至少有2个子树③除根结点外的所有非叶结点至少有m/2向上取整个分支，m/2向上取整-1个关键字④所有叶结点（失败结点）都在同一层，并且不带信息</li><li>多数情况下B树的高度不包括失败结点</li><li>B树的高度:$log_m（n+1）≤h≤log_{m/2向上取整}（（n+1）/2）+1$</li></ul><p><strong>B树的插入</strong></p><ul><li>每次插入到终端结点</li><li>若超过结点关键字上限，则从中间位置（m/2自上取整）裂开为2个结点，中间结点插入父结点（父结点满则继续向上新建结点插入）</li></ul><p><strong>B树的删除</strong></p><ul><li>若是终端结点，直接删除；若不是终端结点，则删除后用直接前躯或后继代替</li><li>若破坏B树的规则则需要调整<br>①若兄弟可借，借父结点，兄弟结点代替父结点<br>②若兄弟不可借，则将该结点、全部兄弟结点和父结点融合为一个结点</li></ul><p><strong>B+树</strong></p><ul><li>类似于分块查找（分支结点关键字是对应叶结点块内的最大值）</li><li>每个分支结点最多有m棵子树</li><li>非叶根结点至少有2棵子树，其他每个分支支结点至少有m/2自上取整棵子树</li><li>结点的子树个数与关键字个数相同（B树结点的子树个数=关键字个数+1）</li><li>所有叶结点（B树叶结点为null，B+树叶结点是全部关键字）包含全部关键字及指向相应记录的指针</li><li>B树查找成功可在任何一层，而B+树查找成功只能在叶子结点</li><li>B+树叶结点由一个p指针连接而成，而叶结点顺序排列，支持顺序查找</li><li>非叶结点只起索引作用，只包含叶结点最大值和对应的指针，不包括对应记录的存储地址</li></ul><h2 id="5-散列表">5.散列表</h2><ul><li>散列表又称哈希表，是一种数据结构，其数据元素的关键字与其存储地址直接相关</li><li>通过哈希函数建立关键字与存储地址的联系</li><li>若不同关键字通过哈希函数映射到同一个值，称其为&quot;同义词″，称这种情况为&quot;冲突&quot;</li></ul><p><strong>处理冲突的方法:</strong><br>①拉链法:把所有&quot;同义词&quot;存放在一个链表中<br>装填因子:表中记录数/散列表长度过<br>②开放定址法:H_i=（H（key）+d）%m<br>d的确定:<br>1）线性探测法:每次向后探测相邻的下一个单元是否为空<br>$d_i=0，1，2，3…$</p><ul><li>删除结点不能简单置空，应做一个&quot;删除标记″，进行逻辑删除</li><li>容易造成同义词，非同义词&quot;聚积（堆积）&quot;现象，严重影响查找效率</li><li>线性探测法计算查找失败的平均查找长度时，空指针的比较也算做一次比较，同时地址等于m的位置无法通过计算进行比较</li></ul><p>2）平方探测法:<br>$d_ⅰ$=+1，-1，$+2^2$，$-2^2$。。。$+k^2$，$-k^2$<br>散列表长度m必须是一个可以表示成4j+3的素数，才探测到所有位置<br>3）伪随机序列法<br>$d_ⅰ$=某个伪随机序列</p><p>③再散列法（再哈希法）<br>当散列函数冲突时，用下一个散列函数计算一个新地址，直到不冲突<br>$H_i=RH_i（Key）$,i=1,2,3…,k</p><p><strong>常见的散列函数:</strong><br>①除留余数法:H（key）=key%p<br>p取一个不大于表长的最大质数<br>②直接定址法:H（key）=a*key+b或直接=key<br>适合关键字的分布基本连续<br>③数字分析法:选取数码分布较为均匀（无规律）的若干位地址<br>④平方取中法:取关键字的平方值的中间几位作为散列地址<br>这种方法得到的散列地址与关键字的每位都有关系</p><h1>八、排序</h1><h2 id="1-排序基本概念">1.排序基本概念</h2><ul><li>算法的稳定性：若$R_i和R_j$对应的关键字相同，排序前后$R_i和R_j$的先后顺序不变则称其是稳定的</li><li>内部排序：排序期间元素全部存放在内存中</li><li>外部排序：排序期间元素无法全部同时存放在内存中，需要在内、外存之间移动</li><li>大多数排序算法都仅适用于顺序存储的线性表</li></ul><h2 id="2-插入排序">2.插入排序</h2><p><strong>直接插入排序</strong></p><ul><li>直接插入元素，后排元素依次后移</li><li>空间复杂度O（1），时间复杂度O（$n^2$）</li><li>是稳定的</li><li>适用于基本有序的排序表和数据量不大的排序表</li><li>适用于顺序存储和链式存储</li></ul><p><strong>折半插入排序</strong></p><ul><li>折半查找元素带插入位置，再移动后排元素</li><li>时间复杂度O（$n^2$）</li><li>是稳定的</li><li>对于数据量不是很大的排序表，折半插入排序性能较好</li><li>适用于顺序存储</li></ul><p><strong>希尔排序</strong></p><ul><li>希尔排序根据折半插入排序改进而来，又称<strong>缩小增量排序</strong></li><li>排序步骤:<br>①第一趟：$d_1=n/2$，将距离为$d_1$的元素视为同一子表<br>②对相应子表进行直接插入排序<br>③$d_2=d_1/2$，将距离为$d_2$的元素视为同一子表<br>以此类推直到$d_i=1$</li><li>希尔本人推荐增量d每次缩小一半，但实际可能存在不同的增量d的变化</li><li>空间复杂度O（1）</li><li>时间复杂度最坏为O（$n^2$）,n再一定范围内时为O（$n^{1.3}$）</li><li>是不稳定的</li><li>适用于顺序存储</li></ul><h2 id="3-交换排序">3.交换排序</h2><p><strong>冒泡排序</strong></p><ul><li>从前往后（或从后往前）两两比较相邻元素的值，若为逆序，则交换他们，直到序列比较完。第二趟从下一个元素再依次比较相邻元素</li><li>空间复杂度O（1），时间复杂度O（$ n^2 $）</li><li>是稳定的</li></ul><p><strong>快速排序</strong></p><ul><li>待排序表中任取一个元素作为枢轴（或基准，通常取首元素），通过一趟排序将待排序表划分为两个部分，前半部分比该基准小，后半部分比该基准大<br>再分别递归的对两个子表重复上述过程，直到每部分只有一个元素或空为止</li><li>空间复杂度平均O（$log_2n$），最坏位O（n）（递归栈占O（n）位）；时间复杂度最坏O（n^2）,最好和平均O（$nlog_2n$）</li><li>若每一次选中的基准将排序序列划为均匀的两个部分，则递归深度最小，算法效率最高</li><li>是不稳定的</li></ul><h2 id="4-选择排序">4.选择排序</h2><p><strong>简单选择排序</strong></p><ul><li>每次选择最小的元素与未排序的首位交换</li><li>空间复杂度0（1），时间复杂度O（$ n^2 $）</li><li>是不稳定的</li></ul><p><strong>堆排序</strong></p><ul><li>大根堆（根≥左、右孩子结点），小根堆相反</li><li>把所有非终端结点都检查一遍，不满足大根堆的要求，则进行调整，当前结点与最大的一个孩子互换</li><li>空间复杂度O（1）；时间复杂度，建堆O（n），排序$nlog_2n$，总的时间复杂度为$nlog_2n$</li><li>是不稳定的</li><li>堆排序的插入：<br>插入表尾，依次与父节点比较，表现为沿着二叉树一路上升</li><li>堆排序的删除：<br>被删除元素用最后一个元素代替，然后依次比较左、右孩子，表现为一路下坠</li></ul><h2 id="5-归并排序和基数排序">5.归并排序和基数排序</h2><p><strong>归并排序</strong></p><ul><li>将两个或两个以上的有序表组合成一个新的有序表</li><li>从小大大依次比较，较小的依次放入一个新的有序表里，以此类推</li><li>2路归并（归并2个有序序列）（常用），4路归并（归并4个有序序列）等</li><li>空间复杂度O（n），时间复杂度O（$nlog_2n$）</li><li>是稳定的</li></ul><p><strong>基数排序</strong></p><ul><li>基于关键字各位大小进行排序</li><li>依次按个位、十位、百位构造递减队列</li><li>按关键字位权重递增的次序进行分配和收集（一趟）</li><li>最高位关键字（百位），最低位关键字（个位），基数r（关键字可能的取值数量）</li><li>空间复杂度O（r），时间复杂度O（d（n+r））（d是分配的趟数，三位数就是三趟…）</li><li>是稳定的</li></ul><h2 id="6-内部排序性能总结">6.内部排序性能总结</h2><table><thead><tr><th>算法总类</th><th>最好情况</th><th>平均情况</th><th>最坏情况</th><th>空间复杂度</th><th>是否稳定</th></tr></thead><tbody><tr><td>直接插入排序</td><td>$O（n）$</td><td>$O（n^2）$</td><td>$O（n^2）$</td><td>$O（1）$</td><td>是</td></tr><tr><td>冒泡排序</td><td>$O（n）$</td><td>$O（n^2）$</td><td>$O（n^2）$</td><td>$O（1）$</td><td>是</td></tr><tr><td>简单选择排序</td><td>$O（n^2）$</td><td>$O（n^2）$</td><td>$O（n^2）$</td><td>$O（1）$</td><td>否</td></tr><tr><td>希尔排序</td><td></td><td></td><td></td><td>$O（1）$</td><td>否</td></tr><tr><td>快速排序</td><td>$O（nlog_2n）$</td><td>$O（nlog_2n）$</td><td>$O（n^2）$</td><td>$O（nlog_2n）$</td><td>否</td></tr><tr><td>堆排序</td><td>$O（nlog_2n）$</td><td>$O（nlog_2n）$</td><td>$O（nlog_2n）$</td><td>$O（1）$</td><td>否</td></tr><tr><td>2路归并排序</td><td>$O（nlog_2n）$</td><td>$O（nlog_2n）$</td><td>$O（nlog_2n）$</td><td>$O（n）$</td><td>是</td></tr><tr><td>基数排序</td><td>$O（d（n+r））$</td><td>$O（d（n+r））$</td><td>$O（d（n+r））$</td><td>$O（r）$</td><td>是</td></tr></tbody></table><h2 id="7-外部排序">7.外部排序</h2><p>外存、内存之间以“块”位单位进行数据交换<br>外部排序：数据元素太多，无法一次全部读入内存进行排序<br>外部排序时间开销：读写外存的时间（主要时间）+内部排序所需时间+内部归并所需时间<br>时间优化：（增加归并路数、减少归并趟数以减少读写外存时间）</p><ul><li>多路归并</li><li>减少初始归并段数量</li></ul><p><strong>多（k）路平衡归并（增加归并路数）：</strong></p><ul><li>最多只有k个段归并位一个</li><li>每一趟归并，若有m个归并段参与归并，则经过这一趟处理得到m/k向上取整个新的归并段</li></ul><p><strong>败者树</strong></p><ul><li>可视为一颗完全二叉树（多了一个根）。k个叶子节点分别是当前参与比较的元素，非叶子节点用来记忆左右子树中的“失败者”，而让胜者往上继续进行比较，一直到根结点</li><li>对于k路归并，第一次构造败者树需要对比关键字k-1次；有了败者树，选出最小元素，只需比较关键字$log_2k向上取整$次</li></ul><p><strong>置换-选择排序（生成初始归并段）</strong></p><ul><li>内存工作区选出最小的写入第一个归并段，并记录这个最小值MINIMAX，每当内存工作区有空位就输入下一个待排序文件</li><li>选出内存工作取中的最小值与MINIMAX进行比较，若大于MINIMAX，则进入归并段1；否则待定，选出第二大的元素与MINIMAX进行比较。</li><li>若内存工作区所有元素都比MINIMAX都小，则开辟归并段2，再如上比较</li></ul><p><strong>最佳归并树</strong></p><ul><li>归并树的带权路径长度WPL=读磁盘次数=写磁盘次数=$\frac{1}{2}$I/O次数</li><li>最佳归并书构造：先归并少的，后归并多的（哈夫曼树构造）</li><li><strong>注意</strong> ：对于k叉归并，若初始归并段数量无法构成严格的k叉归并树，则需要补充几个长度位0的“虚段”，在进行k叉哈夫曼树的构造（补充$（n_0-1）$%（k-1））</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word使用技巧</title>
      <link href="/2022/08/20/word-shi-yong-ji-qiao/"/>
      <url>/2022/08/20/word-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<h1>在正方形里打勾</h1><p>输入2611，全选ALT+x即可出现打勾的正方形</p><h1>上下标</h1><ul><li>上标：ctrl、shift、+</li><li>下标：ctrl、+</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请免费域名并绑定Cloudflare</title>
      <link href="/2022/08/19/shen-qing-mian-fei-yu-ming/"/>
      <url>/2022/08/19/shen-qing-mian-fei-yu-ming/</url>
      
        <content type="html"><![CDATA[<p>注：这种方法申请的域名无法备案。</p><h1>一、注册并申请域名</h1><ol><li>进入官网：<a href="https://nic.eu.org/">https://nic.eu.org/</a></li><li>注册账号：注册账号最好用谷歌邮箱，且注册账号需要大概一天的审核时间，审核成功的邮件在谷歌邮箱的<strong>垃圾邮件</strong>里。</li><li>登陆账号，点击new domain<br>第一个信息填入你的域名地址，<a href="http://xn--8tt.eu.org">带.eu.org</a>（<a href="http://xn--marshver-jo1o.eu.org">如marshver.eu.org</a>）<br>后面信息按要求填写<br>Check for correctness of:选择第一个<br>最后一类表格：先去阿里云DNSpod注册登录：<a href="https://www.dnspod.cn/login">https://www.dnspod.cn/login</a><br>左侧DNS解析我的域名-添加域名-填入你注册的域名-一直确定，将下面两个DNS服务器复制输入即可<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/19/qIjnzVX5JNx8EBG.png" alt><br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/19/oMWZNxlDwygGuK9.png" alt><br>我这个是转移到CF后填写的DNS服务器，必须得先用腾讯云绑定后才能转移到CF。</li><li>submit提交<br>申请域名大概需要2-15天的时间，邮件依然在<strong>垃圾邮件</strong>里，注意查收</li></ol><h1>二、绑定Cloudflare</h1><ol><li>进入Cloudflare：<a href="https://dash.cloudflare.com/">https://dash.cloudflare.com/</a> 注册登录</li><li>add a site添加你的域名</li><li>使用免费服务，过程中会遇到一个替换DNS服务商的流程，去申请域名的网站，将CF的两个DNS服务商替换掉原来的腾讯云的并提交即可（如一中的第二张图所示）</li><li>CF成功大概需要一个小时</li></ol><h1>三、Vercel自定义域名并启用CF的CDN加速</h1><ol><li>进入你的Vercel，点击你的博客文件</li><li>点击右侧View Domains，添加你的域名</li><li>2步会生成两条信息，去CF添加下面两条信息即可</li><li>CF左侧DNS，按Vercel的要求填写即可（注意取消Proxy status，显示DNS only）：<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/19/ZlMGk968xwU1jsD.png" alt></li></ol><p>以后就可以直接用你的域名访问了，可以加www也可以不加（vercel默认不加www会转向www，可在vercel里设置不转），cmd中ping两个网址显示不加www网速会快一点。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习笔记</title>
      <link href="/2022/08/17/linux-xue-xi-bi-ji/"/>
      <url>/2022/08/17/linux-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1>一、下载VMware和Centos</h1><blockquote><p>VMware16：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a></p><blockquote><p>VMware16密钥：<br>ZF3R0-FHED2-M80TY-8QYGC-NPKYF<br>YF390-0HF8P-M81RQ-2DXQE-M2UT6<br>ZF71R-DMX85-08DQY-8YMNC-PPHV8</p></blockquote></blockquote><p>Centos7-DVD：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a></p><h1>二、创建虚拟机并导入Centos</h1><ol><li><p>典型-稍后安装操作系统</p></li><li><p>选择客户机操作系统为红帽7：<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/17/RoBmZ4x6Qg7I3yf.png" alt></p></li><li><p>命名虚拟机名称-选择安装位置-20G、拆分成多个文件-自定义硬件</p></li><li><p>自定义硬件只需根据自己的CPU选择合适的处理器数量和内核数量就行</p></li></ol><p>打开任务管理器-性能，选择资源监视器：<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/17/zGWJsqkhVciKAQa.png" alt></p><p>处理器全给，核数给一半：<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/17/o4O1PKuCMbgFzIS.png" alt></p><ol start="5"><li><p>最后编辑虚拟机设置，将CD/DVD指向ISO映像文件：<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/17/8mqIZHfFgWLoYeR.png" alt></p></li><li><p>打开虚拟机install Centos，选择简体中文，选择软件选择：<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/17/6fBGa43RsV2vC9K.png" alt></p></li><li><p>选择安装目标位置，我要配置分区。<br>一般将linux分成三个区：/boot分区（引导分区），swap分区（交换分区），/（根分区）<br>/boot：1G；swap：与运存大小一致，2G；根分区（/）：剩余内存，17G<br>设备类型：标准分区<br>文件系统选择：ext4，swap，ext4</p></li><li><p>KDUMP实际运行开启，学习可关闭节约内存</p></li><li><p>选择网络和主机名，启用并修改主机名即可完成</p></li><li><p>开始安装，设置root密码（实际密码应较为复杂为好：<a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a> ）并创建用户</p></li></ol><h1>三、网络连接的三种模式</h1><ol><li>桥接模式：虚拟机网络地址和主机属于同一网段，可以与外部系统通讯，但是容易造成IP冲突</li><li><strong>NAT模式</strong>：网络地址转换，可以与外部系统通讯（以主机地址为代理发送和接受信息），不容易造成IP冲突</li><li>主机模式：独立系统，不予外部系统通讯</li></ol><h1>四、安装vmtools</h1><p>VMtools通过主机建立文件夹再用虚拟机的共享文件夹与其链接，实现主机和虚拟机系统的共享操作。</p><ol><li>进入centos（root登录）</li><li>虚拟机菜单重新安装vmtools</li><li>打开光驱文件复制压缩包到<strong>主文件夹-其他位置-计算机-opt</strong>文件下</li><li>使用解压命令 tar，得到一个安装文件<br>cd /opt (进入opt目录)<br>tar -zxvf VMwareTools-10.3.23-16594550.tar.gz(解压文件，可输入tar -zxvf VM+tab快速识别文件名，下面的操作同理，需要注意大小写)</li><li>进入VM解压的目录<br>cd vmware-tools-distrib/<br>ls</li><li>安装VMstolls<br>./vmware-install.pl<br>一直确定即可</li><li>主机建立文件夹（myshare），虚拟机系统设置-选项，启用共享文件夹并设置位置为myshare的位置，myshare将出现在<strong>主文件夹-其他位置-计算机-mnt-hgfs</strong>的文件夹里</li></ol><h1>五、linux目录结构</h1><p>linux一切皆文件</p><table><thead><tr><th>文件名</th><th>存放的内容</th></tr></thead><tbody><tr><td><strong>/bin</strong>（/usr/bin,/usr/local/bin）</td><td>经常使用的指令（binary）</td></tr><tr><td><strong>/sbin</strong> (/usr/sbin,/usr/local/sbin)</td><td>系统管理员使用的指令（super binary）</td></tr><tr><td><strong>/home</strong></td><td>存放普通用户的主目录，目录名是用户的账号名</td></tr><tr><td><strong>/root</strong></td><td>系统管理员的用户主目录</td></tr><tr><td><strong>/etc</strong></td><td>系统管理所需要的配置文件和子目录my.conf</td></tr><tr><td><strong>/usr</strong></td><td>用户的很多应用程序和文件都放在这个目录下，类似于Windows下的program files目录</td></tr><tr><td><strong>/boot</strong></td><td>linux系统启动的核心文件，包括链接文件和镜像文件</td></tr><tr><td><strong>/media</strong></td><td>linux自动识别一些设备，例如U盘，光驱等，当识别后，linux会把识别的设备挂载到这个目录下</td></tr><tr><td><strong>/mnt</strong></td><td>系统提供该目录为了让用户临时挂载别的文件系统，我们可以将外露的存储挂载在/,mt/上，然后进入该目录就可以查看里的内容了。d:/myshar</td></tr><tr><td><strong>/usr/local</strong></td><td>给主机额外安装软件所安装的目录，一般通过编译源码方式安装的程序</td></tr><tr><td><strong>/var</strong></td><td>存放着不断扩充者的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件</td></tr><tr><td>/opt</td><td>给之际额外<strong>安装软件</strong>所摆放的目录，默认为空（安装包）</td></tr><tr><td>/lib</td><td>系统开机所需的最基本的动态连接共享库，作用类似于Windows里的DLL文件，几乎所有的应用程序都需要这些共享库</td></tr><tr><td>/lost+found</td><td>一般情况下是空的，系统非法关机后会生成一些文件</td></tr><tr><td>/tmp</td><td>存放临时文件</td></tr><tr><td>/dev</td><td>类似于windows的设备管理器，把所有硬件用文件的形式存储</td></tr><tr><td>/selinux</td><td>[security-enhanced linux]安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置</td></tr><tr><td><em>/proc（不能动）</em></td><td>虚拟的目录，存放系统内存的映射，访问这个目录获取系统信息</td></tr><tr><td><em>/srv（不能动）</em></td><td>服务启动之后需要提取的数据</td></tr><tr><td><em>/sys（不能动）</em></td><td>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统sysfs</td></tr></tbody></table><h1>六、远程登陆linux和传送文件</h1><h2 id="1-下载Xshell和Xftp">1.下载Xshell和Xftp</h2><p>官网：<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a> 下载两者<br>百度网盘下载链接：<a href="https://pan.baidu.com/s/1t-XCh7OYZhPgYX1GHQJanA?pwd=1111">https://pan.baidu.com/s/1t-XCh7OYZhPgYX1GHQJanA?pwd=1111</a></p><h2 id="2-查询linux系统ip地址">2.查询linux系统ip地址</h2><p>进入linux终端，输入ifconfig<br>ens33中的inet后面的就是IP地址，如：192.168.232.128</p><h2 id="3-远程登录linux">3.远程登录linux</h2><ol><li>打开Xshell</li><li>新建，名称随意，协议是ssh，主机设为IP地址，端口22-确定</li><li>双击会话，接受并保存，输入root和密码</li></ol><h2 id="4-建立文件传输">4.建立文件传输</h2><ol><li>打开Xftp</li><li>如3类似新建，协议是SFTP，端口22</li><li>双击会话，输入root和密码</li><li>如文件出现乱码，选择左上角&gt;文件&gt;当前会话属性&gt;选项&gt;编码换成utf-8</li><li>Xftp左大块是windows文件，又大块是linux文件</li></ol><h1>七、Vi和Vim</h1><h2 id="1-Vi和Vim常用的三种模式">1.Vi和Vim常用的三种模式</h2><p>终端vim+文件名（如hello.java）进入vim编辑。</p><ul><li>正常模式（默认）<br>[上下左右]移动光标，[删除字符]或[删除整行]处理文档，[复制、粘贴]处理数据</li><li>插入模式<br>按下i/I、o/O、a/A、r/R等任何一个字母进入<strong>编辑模式</strong>，一般按<strong>i</strong>（insert）即可</li><li>命令行模式<br>输入ESC，再输入“:”，这个模式提供你相关指令，完成读取、存盘、替换、离开vim、显示行号等的动作。</li></ul><p>命令行模式三种退出方式：</p><ol><li>:wq(保存退出)</li><li>:q(退出不保存)</li><li>:q!(强制退出，不保存)</li></ol><h2 id="2-Vi和Vim常用的快捷键">2.Vi和Vim常用的快捷键</h2><ul><li>拷贝当前行(yy)；拷贝当前向下3行(3yy)；粘贴§</li><li>删除当前行(dd)；删除当前向下3行(3dd)</li><li>查找某个单词[<strong>命令行下</strong> /关键字]，回车查找，输入n是查找下一个</li><li>显示/撤销行号[命令行下 :set nu/nonu]</li><li>编辑文件，使用快捷键到该文档的最末行(G)和最首行(gg)</li><li>撤销动作(u)</li><li>编辑文件。将光标移动到20行(20+shift+g)</li><li>…更多的可以查看文档</li></ul><h1>八、一些指令</h1><h2 id="关机和重启命令">关机和重启命令</h2><table><thead><tr><th style="text-align:center">指令</th><th style="text-align:center">指令说明</th></tr></thead><tbody><tr><td style="text-align:center">shutdown -h now</td><td style="text-align:center">立刻关机</td></tr><tr><td style="text-align:center">shutdown -h 1</td><td style="text-align:center">1分钟后关机</td></tr><tr><td style="text-align:center">shutdown</td><td style="text-align:center">默认1分钟后关机</td></tr><tr><td style="text-align:center">shutdown -r now</td><td style="text-align:center">立即重启</td></tr><tr><td style="text-align:center">halt</td><td style="text-align:center">立即关机</td></tr><tr><td style="text-align:center">reboot</td><td style="text-align:center">立即重启</td></tr><tr><td style="text-align:center">sync</td><td style="text-align:center">内存数据同步到磁盘</td></tr></tbody></table><p>注：</p><ul><li>重启和关机前，首先要运行sync，把内存同步到磁盘</li><li>目前的重启和关机指令已经在关机前进行了sync，但最好还是要运行一次sync</li></ul><h2 id="用户登录和注销">用户登录和注销</h2><ul><li>尽量少用root登录，普通用户输入“<strong>su - root</strong>”切换到root用户，或者“<strong>su - 用户名</strong>”切换到其他用户(切换用户后可用logout返回原来的用户)</li><li>提示符下输入logout即可注销用户</li></ul><p>注：</p><ul><li>logout注销指令在图形运行级别无效，在 运行级别3下有效</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习笔记</title>
      <link href="/2022/08/07/css-xue-xi-bi-ji/"/>
      <url>/2022/08/07/css-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>CSS是层叠样式表的简称，主要用于设置HTML页面中的文本内容，图片的外形以及版面的布局和外观显示样式。</p><p>注：Alt+Shift+F快速格式化文档，实现代码格式自动调整。</p><h1>一、CSS语法规范</h1><p>CSS规则由两个主要的部分构成：选择器以及一条或多条声明</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>      <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>       <span class="token property">font-size</span><span class="token punctuation">:</span> 25px    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经常写在head标签中新建的style中，属性用；结尾。<br>属性+属性名成为“键值对”。</p><h1>二、CSS选择器</h1><p>选择器的作用：选择需要修改的标签。<br>选择器分为基础选择器和复合选择器。<br>基础选择器由单个选择器组成，包括：标签选择器，类选择器，id选择器和通配符选择器。</p><h2 id="1-标签选择器">1.标签选择器</h2><p>以html标签名为选择器，<strong>全选</strong><br>不能差异化样式。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">    h1 &#123;      color: red;       font-size: 25px&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-类选择器-重点">2.类选择器(重点)</h2><p>类选择器可以单独选择一个或某几个标签<br>html元素以<strong>class属性</strong>来设置id选择器，CSS中id选择器以“<strong>.</strong>”来定义</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">.类名 &#123;    属性1: 属性值1;    ...&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>单类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在需要修改属性的标签写上class类=类名即可选择性修改。<br>一个标签可以指定多个类名，用空格隔开(在同一个class属性里)。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>类1 类2 类3 ...<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>多类<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-id选择器">3.id选择器</h2><p>html元素以<strong>id属性</strong>来设置id选择器，CSS中id选择器以**“#”**来定义，<strong>id选择器只能被调用一次</strong>。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">#id名 &#123;    属性1: 属性值1;    ...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-通配符选择器">4.通配符选择器</h2><p>使用**“*”**定义，它表示选中页面中的所有元素。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">* &#123;    属性1: 属性值1;    ..&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>特殊情况下才使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">* &#123;    margin: 0;<span class="token comment">&lt;!-- 内边距 --></span>    padding: 0;<span class="token comment">&lt;!-- 外边距 --></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1>三、CSS字体属性</h1><p>CSS Fonts(字体)属性用于定义字体类型、大小、粗细和文本样式（斜体等）。</p><h2 id="1-字体类型">1.字体类型</h2><p>font-family：字体类型</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p &#123; font-family: "微软雅黑";&#125;div &#123;font-family: Arial, "Microsoft YaHei", "微软雅黑";&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>为了兼容建议使用英文。<br>多字体用逗号隔开，从左向右优先级递减，若电脑一个字体都没有，将使用浏览器默认字体。</p><h2 id="2-字体大小">2.字体大小</h2><p>font-size： 字体大小</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">p &#123;font-size: 20px&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将P改为body指定所有字体大小（除了标题字体，标题字体需要单独设置）。</p><h2 id="3-字体粗细">3.字体粗细</h2><p>font-weight：数字<br>实际开发更提倡使用数字表示字体的粗细。<br>也可使用下列属性名：</p><ul><li>normal：默认正常的字体（400）</li><li>bold：加粗（700）</li><li>bolder：特粗体</li><li>lighter：细体</li><li>number：数字表示粗细</li></ul><h2 id="4-文字样式">4.文字样式</h2><p>font-style：属性名<br>主要使用以下属性：</p><ul><li>normal：默认值</li><li>italic：斜体</li></ul><p>很少将字体改倾斜，一般将&lt;em, i&gt;改为不倾斜字体</p><h2 id="5-字体复合属性">5.字体复合属性</h2><p>使用字体复合属性可以节约代码。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div &#123;    font-style: italic;    font-weight: 700;    font-size: 16px;    font-family: "Microsoft Yahei";    font: italic 700 16px/ "Microsoft Yahei"&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>复合属性可以将字体属性值直接写在font中，但有严格的<strong>顺序</strong>：font：font-style font-weight font-size/line-height font-family<br>即代码块中最后一行代码表示上面所有属性的复合，如果不想要某个属性可以不设置，但最后两个属性值必须填，否则设置无效。</p><h1>四、文本属性</h1><p>CSS Text(文本)属性可定义文本的外观，比如：颜色、对齐文本、装饰文本、文本缩进、行间距等。</p><h2 id="1-文本颜色">1.文本颜色</h2><p>color属性定义颜色。</p><table><thead><tr><th>表示方式</th><th>属性值</th></tr></thead><tbody><tr><td>预定义颜色值</td><td>red、blue、green、pink</td></tr><tr><td>十六进制</td><td>#FF0000、#FF6600</td></tr><tr><td>RGB代码</td><td>rgb(255,0,0)或rgb(100%,0%,0%)</td></tr></tbody></table><p>开发常用PS吸管工具吸取十六进制颜色属性。</p><h2 id="2-对齐文本">2.对齐文本</h2><p>text-align属性设置<strong>水平</strong>对齐方式</p><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐</td></tr><tr><td>right</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><h2 id="3-装饰文本">3.装饰文本</h2><p>text-decoration属性添加下划线、删除线、上划线等。</p><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>none</td><td>默认，没有线</td></tr><tr><td>underline</td><td>下划线</td></tr><tr><td>overline</td><td>上划线</td></tr><tr><td>line-through</td><td>删除线</td></tr></tbody></table><p>none常用于去除&lt;a&gt;链接的下划线。</p><h2 id="4-文本缩进">4.文本缩进</h2><p>text-indent属性指定文本的第一行的缩进。<br>属性值可以是：</p><ul><li>像素值，如 20px</li><li>当前文字大小：如 2em</li></ul><p>em：相对于当前文字的文字大小。</p><h2 id="5-行间距">5.行间距</h2><p>line-height：像素值 px</p><h1>五、CSS的引入方式</h1><p>按照CSS样式书写的位置或引入方式，CSS可以分为三大类：</p><ol><li>行内样式表（行内式）</li><li>内部样式表（嵌入式）</li><li>外部样式表（链接式）</li></ol><h2 id="1-内部样式表">1.内部样式表</h2><p>写道html页面内部、将所有的CSS代码抽取出来单独放到一个&lt;style&gt;标签中,不一定放到head里，理论上可以放到任意位置。</p><h2 id="2-行内样式表">2.行内样式表</h2><p>在元素标签内部的style属性中设定CSS样式，适合修改简单模式</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>行内样式表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-外部样式表">3.外部样式表</h2><p>实施开发都是外部样式表，适合样式比较多的情况。核心是将样式单独写到CSS文件中，之后把CSS文件引入到HTML页面中使用。</p><ol><li>新建CSS文件，将所有CSS代码放入此文件</li><li>在HTML中，head里用&lt;link&gt;标签引入这个文件</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CSS文件路径<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1>六、Emmet语法</h1><p>Emmet语法的前身是Zen coding，它使用缩写，来提高html/css的编写速度，Vscode内部已经集成该语法</p><h2 id="1-快速生成HTML结构语法">1.快速生成HTML结构语法</h2><ol><li>生成标签，直接输入标签名，按tab键即可，比如div+tab</li><li>生成多个相同标签，加上*数量即可，如div*4</li><li>如果有父子级关系，可以用&gt;，如ul&gt;li就可以了</li><li>兄弟级用+，如div+p</li><li>生成带有类名或者id名的，类名用.classmane或者id名用#idname加tab，如p.p-class或p#p-id</li><li>如果生成的div类名是有顺序的，可以用自增符号$,如p.demo$*5，即可生成class名为demo1~5的p标签</li><li>生成标签内容可以用{}，如p{p内容}+tab</li></ol><p>5和6如果没有指定标签，默认是div标签。</p><h2 id="2-快速生成CSS样式语法">2.快速生成CSS样式语法</h2><p>CSS基本采取简写首字母形式即可</p><p>如：w200+tab生成width: 200px；ih26+tab生成line-height: 26px</p><h1>七、CSS复合选择器</h1><p>复合选择器建立在基础选择器之上，对基础选择器进行组合形成的。</p><ul><li>更准确、更高效的选择目标标签</li><li>由两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用复合选择器有：后代选择器、子选择器、并集选择器、伪类选择器等</li></ul><h2 id="1-后代选择器（重要）">1.后代选择器（重要）</h2><p>后代选择器又称为包含选择器，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ol li &#123;    color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即可选择将ol内部的li设置为red，也可搭配class使用。</p><h2 id="2-子选择器（重要）">2.子选择器（重要）</h2><p>只能选择作为某一元素的最近一级子元素。<br>写法：元素1＞元素2{样式声明}</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">ol>li &#123;    color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>li内部的不会变化。</p><h2 id="3-并集选择器（重要）">3.并集选择器（重要）</h2><p>并集选择器可以选择多组标签，同时为他们定义相同的样式，通常用于集体声明。<br>写法：元素1, 元素2{样式声明}（通常一个元素名加，为一行）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">div, p&#123;    color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>元素可用后代选择器和子选择器代替</p><h2 id="4-伪类选择器">4.伪类选择器</h2><p>用于向某些选择器添加特殊的效果，比如给链接添加特殊喜爱过，或选择第1个，第n个元素。<br>用&quot;:&quot;表示，比如:hover（当鼠标经过的时候）、:first-child（第一个孩子）。<br>伪类选择器有很多，有链接伪类、结构伪类。</p><h3 id="1-链接伪类">(1)链接伪类</h3><ul><li>a:link{样式声明}        /<em>选择所有未被访问的链接</em>/</li><li>a:visited{样式声明}     /<em>选择所有已被访问的链接</em>/</li><li>a:hover{样式声明}       /<em>选择鼠标指针位于其上的链接</em>/</li><li>a:avtive{样式声明}      /<em>选择活动链接（鼠标按下未弹起的链接）</em>/</li></ul><p>为了确保生效，请按照LVHA的顺序声明:link-:visited-:hover-:active</p><p>实际开发经常用a指定链接样式，再用:hover定义鼠标悬停效果就可以了</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">a &#123;    color: #333;    text-decoration: none;&#125;a:hover &#123;    color: #369;    text-decoration: underline;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-focus伪类选择器">(2):focus伪类选择器</h3><p>用于选取获得焦点（光标）的表单元素</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">imput:focus &#123;    background-color: yello;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1>八、CSS的元素显示模式</h1><p>元素显示模式就是元素以什么方式进行显示，一般分为块元素和行内元素</p><h2 id="1-块元素">1.块元素</h2><p>常见的块元素有<strong>h1~h6、p、div、ul、ol、li等</strong></p><p>块元素的特点：</p><ol><li>独占一行</li><li>高度、宽度、外边距以及内边距都可以控制</li><li>宽度默认是容器（父级宽度）的100%</li><li>里面可以放行内或者块级元素</li></ol><p>注：文字类元素内不能使用块级元素，如p和h1<br>~h6不能放其他块级元素</p><h2 id="2-行内元素">2.行内元素</h2><p>常见行内元素有<strong>a、strong、b、em、i、del、s、ins、u、span等</strong></p><p>行内元素的特点：</p><ol><li>一行可以有多个</li><li>高、宽直接设置无效</li><li>默认宽度是它本身内容的宽度</li><li>行内元素只能容纳文本或者其他行内元素</li></ol><p>注：链接里不能再放链接，特殊情况链接a里面可以放块级元素，但是给a转换一下块级模式最安全</p><h2 id="3-行内块元素">3.行内块元素</h2><p>行内元素有几个特殊的标签：<strong>img、input、td</strong>。它们同时具有块元素和行内元素的特点。</p><p>行内块元素的特点：</p><ol><li>一行显示多个，与相邻行内元素在一行时有空隙</li><li>默认宽度时内容本身的宽度</li><li>高度、行高、外边距以及内边距都可以控制</li></ol><h2 id="4-元素显示模式转换">4.元素显示模式转换</h2><ul><li>行内元素转换为块元素：<strong>display:block</strong>;</li><li>块元素转换为行内元素：<strong>display:inline</strong>;</li><li>转换为行内块元素：<strong>display:inline-block</strong>;</li></ul><p>注：写在style中相应的元素CSS属性内</p><h2 id="5-单行文字垂直居中">5.单行文字垂直居中</h2><p>CSS没有文字垂直居中的代码，我们可以让<strong>文字的行高等于盒子的高度</strong></p><h1>九、CSS的背景</h1><p>背景属性有：<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等</strong></p><h2 id="1-背景颜色">1.背景颜色</h2><p>background-color属性定义元素的背景颜色<br>默认值是<strong>transparent</strong>（透明），也可以指定一种颜色</p><h2 id="2-背景图片">2.背景图片</h2><p>background-image属性描述了元素的背景图像，优点是便于控制位置<br>属性值有：none\url()定义</p><h2 id="3-背景平铺">3.背景平铺</h2><p>background-repeat属性设置背景照片平铺效果<br>属性值有：<strong>repeat/no-repeat/repeat-x/repeat-y</strong><br>依次是：<strong>平铺/不平铺/沿着x轴平铺/沿着y轴平铺</strong></p><h2 id="4-背景图片位置">4.背景图片位置</h2><p>background-position属性改变图片在背景中的位置<br>属性值有：<strong>x y</strong>;<br>x，y可以使用方位名词或者精确单位</p><h3 id="1-方位名词">(1)方位名词</h3><ul><li>方位名词有：<strong>top、center、bottom、left、right</strong></li><li>如果只写了一个方位名词，第二个值默认居中对齐</li><li>方位名词因为x和y不同，所以顺序可以颠倒</li></ul><h3 id="2-精确单位">(2)精确单位</h3><ul><li>精确单位第一个一定是x坐标，第二个一定是y坐标</li><li>如果只写了一个坐标，则是x坐标，y坐标默认居中对齐</li></ul><h3 id="3-混合单位">(3)混合单位</h3><ul><li>精确单位和方位名词可以混合使用，但第一个一定是x坐标，第二个值一定是y坐标</li></ul><h2 id="5-背景图像固定">5.背景图像固定</h2><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动<br>属性值有：<strong>scroll/fixed</strong><br>依次为：<strong>随着内容滚动/固定</strong></p><h2 id="6-背景符合写法">6.背景符合写法</h2><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性background中，从而节约代码量<br>没有特定的书写顺序，一般习惯约定顺序为：<br>background：<strong>背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</strong></p><h2 id="7-背景色半透明">7.背景色半透明</h2><p>CSS3为我们提供了颜色半透明的效果</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">background: rgba(0, 0, 0, 0.3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>rgba：红，绿，蓝，透明度（alpha）</li><li>透明度取值范围在0~1之间,可简写为.3</li><li>背景半透明指盒子半透明，盒子里面的内容不受影响</li><li>CSS3新增属性，是IE9+版本浏览器才支持（实际开发不考虑兼容性）</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑必装软件合集</title>
      <link href="/2022/08/04/dian-nao-bi-zhuang-ruan-jian-he-ji/"/>
      <url>/2022/08/04/dian-nao-bi-zhuang-ruan-jian-he-ji/</url>
      
        <content type="html"><![CDATA[<h1>iGG谷歌访问助手</h1><p>谷歌浏览器第一步，下载iGG谷歌助手，再登陆账号同步账号信息。<br>下载地址：<a href="https://chrome.zzzmh.cn/info/ncldcbhpeplkfijdhnoepdgdnmjkckij">https://chrome.zzzmh.cn/info/ncldcbhpeplkfijdhnoepdgdnmjkckij</a></p><h1>桌面图标美化</h1><h2 id="RocketDock">RocketDock</h2><p>RocketDock是一款模仿苹果的win下的桌面美化工具。<br>官网：<a href="https://punklabs.com/">https://punklabs.com/</a></p><h2 id="Stacks-Docklet-2-0">Stacks Docklet 2.0</h2><p>Stacks Docklet是RocketDock中的一个插件，可以实现软件图标的折叠与展开。<br>下载地址https://www.softpedia.com/get/Desktop-Enhancements/Other-Desktop-Enhancements/Stacks-Docklet.shtml<br><strong>注意</strong>：安装过程中记得把其他的安装的√给×了<br>安装完成后把整个文件夹剪切到/RocketDock/Docklets文件夹下</p><h1>7-Zip</h1><p>强力的压缩软件。<br>官网：<a href="https://www.7-zip.org/">https://www.7-zip.org/</a></p><h1>360驱动大师</h1><p>简洁的驱动更新软件，不过全面诊断的的时候*<strong>不要</strong>修复系统安全防护，该项会安装360全家桶。<br>官网：<a href="http://dm.weishi.360.cn/home.html">http://dm.weishi.360.cn/home.html</a></p><h1>格式工厂</h1><p>格式工厂是一款免费多功能的多媒体格式转换软件(视频，图片的格式转换)。<br>官网：<a href="http://www.pcgeshi.com/">http://www.pcgeshi.com/</a></p><h1>IDM</h1><p>IDM是Internet Download Manager的简称，是一款电脑专业的下载器，不仅下载速度快，还能嗅探网站的视频并下载。<br>官网：<a href="https://www.internetdownloadmanager.cn/">https://www.internetdownloadmanager.cn/</a><br>破解版链接：<a href="https://pan.baidu.com/s/1OaXHih42NmHGNZEkVzIL-Q?pwd=1234">https://pan.baidu.com/s/1OaXHih42NmHGNZEkVzIL-Q?pwd=1234</a></p><h1>nn加速器</h1><p>nn加速器是一款持续很久的免费游戏加速器。<br>官网：<a href="https://www.nn.com/">https://www.nn.com/</a></p><h1>potplayer</h1><p>PotPlayer 是 KMPlayer 的原制作者姜龙喜进入 Daum 公司后的新一代网络播放器。PotPlayer 的优势在于强大的内置解码器；而 KMPlayer 的优势在于强大的定制能力和个性化功能。<br>下载地址：<a href="https://potplayer.en.softonic.com/">https://potplayer.en.softonic.com/</a></p><h1>Snipaste</h1><p>强大的截图软件。<br>官网：<a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></p><h1>Uninstall Tool</h1><p>强力的卸载软件。<br>官网：<a href="https://crystalidea.com/uninstall-tool">https://crystalidea.com/uninstall-tool</a></p><h1>酷我音乐</h1><p>破解版链接：<a href="https://pan.baidu.com/s/1RBsaENvxxdLleblqRFl0bA?pwd=x8i0">https://pan.baidu.com/s/1RBsaENvxxdLleblqRFl0bA?pwd=x8i0</a></p><h1>Ocam</h1><p>小巧免费的录屏软件。<br>下载地址：<a href="https://ocam.en.softonic.com/">https://ocam.en.softonic.com/</a></p><h1>Joplin</h1><p>三端同步Markdown编辑器，可利用onedrive存储同步数据，5G存放markdown文件也足够了。<br>官网：<a href="https://joplinapp.org/">https://joplinapp.org/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 搞机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html学习笔记</title>
      <link href="/2022/07/27/html-xue-xi-xin-de/"/>
      <url>/2022/07/27/html-xue-xi-xin-de/</url>
      
        <content type="html"><![CDATA[<p>注：vscode添加注释用Alt+Shift+A注释所选内容，ctrl+/注释所选整行。</p><h1>一、Web标准的构成</h1><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>用于对<strong>网页元素</strong>进行整理和分类，html</td></tr><tr><td>表现</td><td>用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，CSS</td></tr><tr><td>行为</td><td>指网页模型的定义及<strong>交互</strong>的编写，Javascript</td></tr></tbody></table><p>即结构写到Html文件中，表现写到CSS文件中，行为写到Javascript文件中；三者中 <strong>结构</strong> 最重要</p><h1>二、基本结构标签</h1><table><thead><tr><th>标签名</th><th>定义</th><th>说明</th></tr></thead><tbody><tr><td>html和/html</td><td>HTML标签</td><td>页面中最大的标签，我们称为 根标签</td></tr><tr><td>head和/head</td><td>文档的头部</td><td>注意在head标签中我们必须要设置的标签是title</td></tr><tr><td>title和/title</td><td>文档的标题</td><td>让页面拥有一个属于自己的网页标题</td></tr><tr><td>body和/body</td><td>文档的主体</td><td>元素包含文档的所有内容，页面内容基本都是放到body里面的</td></tr></tbody></table><p>vscode新建html文件，英文“!”,第一个自动创建基本结构如下：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 类型声明 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>zh-CN<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- lang语言种类是zh-CN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 字符集是UTF-8(万国码) --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>创建的页面标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    主题内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>三、HTML常用标签</h1><h2 id="1-标题标签">1.标题标签</h2><p>&lt;h1&gt;-&lt;h6&gt;6个等级的标题标签</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>一级标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-段落标签">2.段落标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落标签<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>段落内容随浏览器大小自动变化，段落与段落之间有间隙。</p><h2 id="3-换行标签">3.换行标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>换行标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>换行标签是单标签，行之间没有间隙。</p><h2 id="4-文本格式化标签">4.文本格式化标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>加粗<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 也可用&lt;b>&lt;/b> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>倾斜<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 也可用&lt;i>&lt;/i> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>删除线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 也可用&lt;s>&lt;/s> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>下划线<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 也可用&lt;u>&lt;/u> --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>推荐用前面的。</p><h2 id="5-div-和-span-标签">5.&lt;div&gt;和&lt;span&gt;标签</h2><p>&lt;div&gt;和&lt;span&gt;没有语义，它们相当于一个盒子，用来装内容。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>div独占一行<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>span之间一行显示，但之间有距离<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-图像标签">6.图像标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>图像URL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>img也是单标签，下面是其他属性：</p><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td><strong>必须属性</strong></td></tr><tr><td>alt</td><td>文本</td><td>图像不能显示的文字</td></tr><tr><td>title</td><td>文本</td><td>鼠标放到图像上显示的文字</td></tr><tr><td>width</td><td>像素</td><td>图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>图像的高度</td></tr><tr><td>border</td><td>像素</td><td>图像的边框粗细</td></tr></tbody></table><p>设置width或者height其中之一，另一个属性会等比例缩放。<br>border一般不通过html设定，而通过CSS来设定。</p><h2 id="7-相对路径">7.相对路径</h2><table><thead><tr><th>相对属性分类</th><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>同一级路径</td><td></td><td>图像位于html文件同一级 如&lt;img src=“hello.jpg” /&gt;</td></tr><tr><td>下一级路径</td><td>/</td><td>图像位于hyml文件下一级 &lt;img src=“images/hello.jpg” /&gt;</td></tr><tr><td>上一级路径</td><td>…/</td><td>图像位于html文件上一级 &lt;img src=“…/hello.jpg” /&gt;</td></tr></tbody></table><p>上一级如果出现多层嵌套则用…/…/.多层./hello.jpg</p><h2 id="8-绝对路径">8.绝对路径</h2><p>从盘符开始，如D:\MarshVer’s Blog\source_posts\Html学习心得\img.jpg。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:\MarshVer<span class="token punctuation">'</span>s Blog\source\_posts\Html学习心得\img.jpg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实际开发常用完整的图片网络地址。</p><h2 id="9-超链接标签">9.超链接标签</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 文本或图像 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>属性</th><th>作业</th></tr></thead><tbody><tr><td>href</td><td>指定链接目标的url地址，<strong>必须属性</strong></td></tr><tr><td>target</td><td>指定连接打开方式，默认_self，可设置_blank在新窗口中打开</td></tr></tbody></table><ul><li>外部链接href里跳转的目标是网址，网址需要从 <strong>http://</strong> 开始</li><li>内部链接href里跳转的目标是本地html文件的相对地址，</li><li>空链接href里填写#临时替代，</li><li>下载链接href填写的是文件就是下载文件（.exe，.zip等）。</li></ul><h2 id="10-锚点链接">10.锚点链接</h2><p>锚点链接可以快速定位到页面的某个位置。</p><ul><li>在链接文本的href属性中，设置属性值为 <strong>#名字</strong> 的形式，如 &lt;a href=“#two”&gt; 锚点&lt;/a&gt;</li><li>找到目标位置标签，里面添加一个 <strong>id属性</strong>，如&lt;h3 id=“two”&gt;锚点介绍&lt;/h3&gt;</li></ul><p>锚点链接类似于超链接标签，只是href里的内容不同，同时还需要在跳转的目的字段加入id属性。</p><h2 id="11-特殊字符">11.特殊字符</h2><p>html文件中的某些特殊字符可能无法显示，需要用特定的代码代替，常用的如下：</p><table><thead><tr><th>特殊字符</th><th>描述</th><th>字符的代码</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>&amp;lt;</td></tr><tr><td>&gt;</td><td>大于号</td><td>&amp;gt;</td></tr><tr><td></td><td>空格符</td><td>&amp;nbsp;</td></tr></tbody></table><h1>四、表格标签</h1><h2 id="1-表格相关标签">1.表格相关标签</h2><h3 id="1-表格标签基本结构">(1)表格标签基本结构</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>&lt;table&gt;&lt;/table&gt;定义表格</li><li>&lt;tr&gt;&lt;/tr&gt;定义表格中的行，必须嵌套在&lt;table&gt;&lt;/table&gt;中</li><li>&lt;td&gt;&lt;/td&gt;定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;中</li></ul><h3 id="2-表头单元格标签">(2)表头单元格标签</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>        ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表头单元格位于第一行或第一列，其内容默认加粗居中显示。</p><h3 id="3-表格结构标签">(3)表格结构标签</h3><p>在表格标签中，分别用：<strong>&lt;thead&gt;&lt;/thead&gt;<strong>标签</strong>表格的头部区域</strong>；<strong>&lt;tbody&gt;&lt;/tbody&gt;<strong>标签</strong>表格的主题区域</strong>,这样更好的分清表格结构。</p><p>&lt;thead&gt;内部必须拥有&lt;tr&gt;标签，位于第一行。</p><h2 id="2-表格属性">2.表格属性</h2><h3 id="1-一般属性">(1)一般属性</h3><p>表格属性实际不常用，一般在CSS中设置。</p><table><thead><tr><th>属性名</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>align</td><td>left，center、right</td><td>表格对齐方式</td></tr><tr><td>border</td><td>1或&quot;&quot;</td><td>单元格是否有边框，默认没有</td></tr><tr><td>cellpadding</td><td>像素值</td><td>单元格边缘与其内容的距离，默认1像素</td></tr><tr><td>cellspacing</td><td>像素值</td><td>单元格之间的距离，默认2像素</td></tr><tr><td>width</td><td>像素值或百分比</td><td>表格宽度</td></tr></tbody></table><h3 id="2-合并单元格属性">(2)合并单元格属性</h3><ul><li>跨行合并：rowspan=“合并单元格的个数”（写在上测单元格）</li><li>跨列合并：colspan=“合并单元格的个数”（写在左侧单元格）<br>合并单元格个数包括自己，作为单元格的属性。</li></ul><p>合并单元格三部曲：</p><ul><li>确定跨行还是跨列</li><li>找到目标单元格，写上合并方式=合并的单元格的数量如：&lt;td colspan=“2”&gt;单元格内容&lt;/td&gt;</li><li>删除多余的单元格</li></ul><h1>五、列表标签</h1><p>列表最大的特点就是整齐、整洁、有序。它作为布局会更加自由和方便。</p><h2 id="1-无序列表（重点）">1.无序列表（重点）</h2><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，但&lt;li&gt;&lt;/li&gt;中可以容纳所有元素。</p><p>无序列表有自己的属性，但实际一般会使用CSS来设置</p><h2 id="2-有序列表">2.有序列表</h2><p>&lt;ol&gt;&lt;/ol&gt;标签用于定义有序列表，列表排序已数字显示，使用&lt;li&gt;&lt;/li&gt;标签定义列表项。</p><p>其他与无序列表一样。</p><h2 id="3-自定义列表（重点）">3.自定义列表（重点）</h2><p>自定义列表常用于对术语或名词进行解释和描述。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&lt;dl&gt;&lt;/dl&gt;里面只能有&lt;dt&gt;&lt;/dt&gt;和&lt;dd&gt;&lt;/dd&gt;<br>一个&lt;dt&gt;&lt;/dt&gt;对应多个&lt;dd&gt;&lt;/dd&gt;</p><h2 id="4-表单标签">4.表单标签</h2><p>表单用于收集用户信息。</p><h3 id="1-表单域">(1)表单域</h3><p>&lt;form&gt;&lt;/form&gt;会把它范围内的表单元素信息提交给服务器。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>表单域名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    各种表单元素控件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>url地址</td><td>指定接收并处理表单数据的服务器程序的url地址</td></tr><tr><td>method</td><td>get/post</td><td>设置表单数据的提交方式</td></tr><tr><td>name</td><td>名称</td><td>指定表单名称</td></tr></tbody></table><h3 id="2-表单控件（元素）">(2)表单控件（元素）</h3><p>1.input输入表单元素(单标签)<br>2.select下拉表单元素<br>3.textarea文本域元素</p><h4 id="1-input的一些类型">1)input的一些类型</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- text 文本框 用户可以输入任何文字 --></span>    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- password 密码框 用户看不见输入的密码 --></span>    性别：男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- radio 单选按钮 可以实现多选一 --></span>    爱好：吃饭<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> 睡觉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> 打游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>     <span class="token comment">&lt;!-- checkbox 复选按钮 可以实现多选 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-input的重要属性">2)input的重要属性</h4><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>自定义</td><td>定义input元素的名称</td></tr><tr><td>value</td><td>自定义</td><td>规定input元素的值</td></tr><tr><td>checked</td><td>checked</td><td>规定首次加载时默认被选中</td></tr><tr><td>maxlength</td><td>正整数</td><td>规定输入字符的最大长度</td></tr></tbody></table><p><strong>注：</strong></p><ul><li>name属性在radio和checkbox中应相同才能实现各自的功能。</li><li>value值在radio和checkbox中应赋值，这样导入后台才能被识别。</li><li>type，name和value必须填，name和value主要针对后台人员使用。</li></ul><h4 id="3-input的其他属性">3)input的其他属性</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>text</td><td>定义一行文本可输入数据</td></tr><tr><td>button</td><td>定义可点击按钮（多数情况下通过Javascript启动脚本）</td></tr><tr><td>file</td><td>定义输入字段和“浏览”按钮，供文件上传</td></tr><tr><td><em>hidden</em></td><td>定义颖仓的输入字段</td></tr><tr><td><em>image</em></td><td>定义图像形式的提交按钮</td></tr><tr><td>reset</td><td>定义重置按钮，清空表单中的所有数据</td></tr><tr><td>submit</td><td>定义提交按钮，把表单数据发送到服务器</td></tr></tbody></table><h4 id="4-label标签">4)label标签</h4><p>label标签用于绑定一个表单元素，当点击label标签内的文本，即可选定。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token comment">&lt;!-- label的for属性值与input的id值相同 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5-select标签">5)select标签</h4><p>select定义下拉列表。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selected<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!-- 设置selected为默认选择项 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-textarea标签">6)textarea标签</h4><p>textarea定义大量内容的文本框。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- row和cols在实际开发基本不用，都是用CSS来改变大小 --></span>    默认文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更多html内容请查看W3C文档说明：<a href="https://www.w3school.com.cn/html/index.asp">https://www.w3school.com.cn/html/index.asp</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VScode中C和C++的环境配置</title>
      <link href="/2022/07/05/vscode-zhong-c-he-c-de-huan-jing-pei-zhi/"/>
      <url>/2022/07/05/vscode-zhong-c-he-c-de-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1>VScode中配置C/C++</h1><p>这是一个教程，（在windows 10中）为vscode配置C/C++的运行环境。</p><h2 id="1-下载-VScode">1.下载 VScode</h2><p>首先，去 <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a> 下载对应操作系统的VScode，下载稳定版本。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/RZea1UrwmcYdODA.png" alt></p><h2 id="2-安装-VScode">2.安装 VScode</h2><p>全选和默认安装。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/7ztxYewrKACLPhn.png" alt></p><h2 id="3-下载-Gcc编译工具">3.下载 Gcc编译工具</h2><p>去 <a href="https://sourceforge.net/projects/mingw-w64/files/">https://sourceforge.net/projects/mingw-w64/files/</a> 下载mingw-w64,下面是Windows版本。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/tF6avNq89VO4noH.png" alt></p><h2 id="4-解压-Gcc">4.解压 Gcc</h2><p>解压 gcc 到你喜欢的位置,例如C盘的根目录。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/IbtenwvsYdZES5y.png" alt></p><h2 id="5-配置环境变量">5.配置环境变量</h2><p>为了让程序访问这些编译器，你需要添加gcc-bin文件夹的目录 (我的是 C: \mingw64 \ bin ,选择地址复制) 到用户变量Path中。<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/A9qKemdkTcujgO8.png" alt><br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/HbkICMA7tT3hlOj.png" alt><br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/QmwbOLZMJUp164y.png" alt><br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/QzsNOWr8xq7HFL3.png" alt></p><p>现在证明一下是否配置成功，任意地方打开cmd，输入 gcc --version (中间有个空格), 点击确定, 如果看到如下的版本号，则证明配置成功。<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/m9JecMhb4jXY2xo.png" alt></p><h2 id="6-配置你的代码文件夹">6.配置你的代码文件夹</h2><p>在你喜欢的地方建一个文件夹名为CODE_ C,在这个文件夹中,你能放入你的C语言程序。如果你想放入其他语言的程序，可以新建一个新的文件夹。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/Pz7CN6BZWlVRDSr.png" alt></p><p>在 CODE_C 文件夹中，你可以创建两个文件夹 C_Single 和 C_Multiple。前面一个可以放单个小项目，后面一个可以放复杂的大项目。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/7d8qEPgsAUG4lwL.png" alt></p><h2 id="7-配置VScode">7.配置VScode</h2><p>打开你的VScode，并打开C_Single文件夹，新建如图文件夹和文件：</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/j1zDhbCVXqEt3H9.png" alt></p><p>launch.json:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token comment">//这个大括号里是我们的‘调试(Debug)’配置</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Debug"</span><span class="token punctuation">,</span> <span class="token comment">// 配置名称</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span> <span class="token comment">// 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span> <span class="token comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe"</span><span class="token punctuation">,</span> <span class="token comment">// 将要进行调试的程序的路径</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 程序调试时传递给程序的命令行参数，这里设为空即可</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span><span class="token punctuation">,</span> <span class="token comment">// 调试程序时的工作目录，此处为源码文件所在目录</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 环境变量，这里设为空即可</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 为true时使用单独的cmd窗口，跳出小黑框；设为false则是用vscode的内置终端，建议用内置终端</span>            <span class="token property">"internalConsoleOptions"</span><span class="token operator">:</span> <span class="token string">"neverOpen"</span><span class="token punctuation">,</span> <span class="token comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，新手调试用不到</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span> <span class="token comment">// 指定连接的调试器，gdb是minGW中的调试程序</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"C:\\mingw64\\bin\\gdb.exe"</span><span class="token punctuation">,</span> <span class="token comment">// 指定调试器所在路径，如果你的minGW装在别的地方，则要改成你自己的路径，注意间隔是\\</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"build"</span> <span class="token comment">// 调试开始前执行的任务，我们在调试前要编译构建。与tasks.json的label相对应，名字要一样</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>倒数第二个代码数据是你自己的gdb文件的位置，我的是 mingw64\bin\gdb.exe。</p><p>tasks.json:</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span><span class="token comment">//这个大括号里是‘构建（build）’任务</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token comment">//任务名称，可以更改，不过不建议改</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span> <span class="token comment">//任务类型，process是vsc把预定义变量和转义解析后直接全部传给command；shell相当于先打开shell再输入命令，所以args还会经过shell再解析一遍</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"gcc"</span><span class="token punctuation">,</span> <span class="token comment">//编译命令，这里是gcc，编译c++的话换成g++</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token comment">//方括号里是传给gcc命令的一系列参数，用于实现一些功能</span>                <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span> <span class="token comment">//指定要编译的是当前文件</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span> <span class="token comment">//指定输出文件的路径和名称</span>                <span class="token string">"$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe"</span><span class="token punctuation">,</span> <span class="token comment">//承接上一步的-o，让可执行文件输出到源码文件所在的文件夹下的bin文件夹内，并且让它的名字和源码文件相同</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span> <span class="token comment">//生成和调试有关的信息</span>                <span class="token string">"-Wall"</span><span class="token punctuation">,</span> <span class="token comment">// 开启额外警告</span>                <span class="token string">"-static-libgcc"</span><span class="token punctuation">,</span>  <span class="token comment">// 静态链接libgcc</span>                <span class="token string">"-fexec-charset=GBK"</span><span class="token punctuation">,</span> <span class="token comment">// 生成的程序使用GBK编码，不加这一条会导致Win下输出中文乱码</span>                <span class="token string">"-std=c11"</span><span class="token punctuation">,</span> <span class="token comment">// 语言标准，可根据自己的需要进行修改，写c++要换成c++的语言标准，比如c++11</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//group表示‘组’，我们可以有很多的task，然后把他们放在一个‘组’里</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span><span class="token comment">//表示这一组任务类型是构建</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token comment">//表示这个任务是当前这组任务中的默认任务</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"presentation"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//执行这个任务时的一些其他设定</span>                <span class="token property">"echo"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//表示在执行任务时在终端要有输出</span>                <span class="token property">"reveal"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span> <span class="token comment">//执行任务时是否跳转到终端面板，可以为always，silent，never</span>                <span class="token property">"focus"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//设为true后可以使执行task时焦点聚集在终端，但对编译来说，设为true没有意义，因为运行的时候才涉及到输入</span>                <span class="token property">"panel"</span><span class="token operator">:</span> <span class="token string">"new"</span> <span class="token comment">//每次执行这个task时都新建一个终端面板，也可以设置为shared，共用一个面板，不过那样会出现‘任务将被终端重用’的提示，比较烦人</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token string">"$gcc"</span> <span class="token comment">//捕捉编译时编译器在终端里显示的报错信息，将其显示在vscode的‘问题’面板里</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token comment">//这个大括号里是‘运行(run)’任务，一些设置与上面的构建任务性质相同</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"run"</span><span class="token punctuation">,</span>             <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>             <span class="token property">"dependsOn"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token comment">//任务依赖，因为要运行必须先构建，所以执行这个任务前必须先执行build任务，</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;\\bin\\$&#123;fileBasenameNoExtension&#125;.exe"</span><span class="token punctuation">,</span> <span class="token comment">//执行exe文件，只需要指定这个exe文件在哪里就好</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token comment">//这一组是‘测试’组，将run任务放在test组里方便我们用快捷键执行</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"presentation"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"echo"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                <span class="token property">"reveal"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>                <span class="token property">"focus"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//这个就设置为true了，运行任务后将焦点聚集到终端，方便进行输入</span>                <span class="token property">"panel"</span><span class="token operator">:</span> <span class="token string">"new"</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三行代码如果是配置C++的环境则改成g++（配置C++只有这一步与C不同，其他的跟配置C环境相同）。</p><h2 id="8-最后">8.最后</h2><p>现在，你可以将vscode的快捷键设置为F4并编写C语言代码。按F4运行C语言代码，F5是dubug。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/kdxFJ2PjTeSAB4y.png" alt></p><p>运行C语言代码时，运行文件将显示在bin文件夹中。</p><p><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/MUfF5iXSkvT1hJW.png" alt></p><h2 id="现在开始你的编程之旅吧">现在开始你的编程之旅吧!</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客出现的问题</title>
      <link href="/2022/07/03/bo-ke-chu-xian-de-wen-ti/"/>
      <url>/2022/07/03/bo-ke-chu-xian-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1>图片不显示</h1><p>在根目录安装hexo-asset-image，就能按照markdown的格式进行图片的插入。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> https://github.com/CodeFalling/hexo-asset-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果npm下载太慢可以用cnpm install…代替。<br>安装cnpm，同时将cnmp使用淘宝镜像提高下载速度</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> cnpm -g<span class="token function">npm</span> <span class="token function">install</span> cnpm -g --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时在hexo中使用文章资源文件夹，在config.yaml文件中更改一下配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">post_asset_folder: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹，你可以把与该文章有关的任何文件放在该文件夹中，并在文章中用相对路径![ ]（./…）引用。</p><h1>备份问题</h1><p>一般我们hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。也就是上传的是在本地目录里自动生成的.deploy_git里面。<br>其他文件 ，包括我们写在source 里面的文章和配置文件，主题文件，都没有上传到github,所以可以利用git的分支管理，将源文件上传到另一个分支即可备份。</p><h2 id="1-创建新分支">1.创建新分支</h2><p>下图所示位置输入分支名并确认即可创建（我的分支名为source）<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/a3EcMRejTlP4WHC.png" alt><br>将刚才创建的分支设置为默认分支：<br><img src="https://s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif" data-original="https://s2.loli.net/2022/08/03/pAekOq18VfCscYv.png" alt></p><h2 id="2-获取-git文件夹">2.获取.git文件夹</h2><p>去任意地方把刚刚的source分支给clone下来</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/marshver/marshver.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后把里面的.git文件夹剪切到博客的根文件夹中。</p><h2 id="3-主题文件无法上传">3.主题文件无法上传</h2><p>如果你的博客里有主题文件夹（themes/yourtheme），需要把主题文件夹的.git文件夹给删除，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的主题配置在别的电脑上就用不了了。</p><h2 id="4-博客备份">4.博客备份</h2><p>博客文件打开git执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"Backup"</span><span class="token function">git</span> push origin <span class="token builtin class-name">source</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就备份完博客的源文件，且在Github上能看到两个分支(master和source)。后续备份最后一步只需git push即可。</p><h2 id="5-恢复博客">5.恢复博客</h2><p>如想恢复博客请看“博客相关”中的恢复博客<a href="/2022/07/01/bo-ke-xiang-guan/" title="博客相关">博客相关</a></p><h1>博客优化</h1><h2 id="1-图片问题">1.图片问题</h2><h3 id="1-搭配图床">(1)搭配图床</h3><p>图片如果用本地文件，会影响服务器的响应速度，我们可以把图片放到图床上，在博客里用图片的url地址引用，可以在一定程度上加快服务器的响应速度。</p><p>这里我推荐sm.mshttps://sm.ms/, 首先是免费的，虽然只有5个G，但对于只放图片够用了。</p><p>可以搭配PicGo图片批量上传，直接生成图片链接到剪切板，还能查看历史图片的URL链接，非常方便。</p><p>去官网： <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a> 下载稳定版本的.exe文件，只需要将你自己sm.ms的API Token配置到PicGo上，即可使用。</p><h3 id="2-图片懒加载">(2)图片懒加载</h3><p>懒加载一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载，对服务器有一定的缓解压力作用。</p><p>首先安装图片懒加载插件,根目录执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Hexo根目录配置文件末尾加入以下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 图片懒加载</span><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 如果为 true，则只有来自帖子或页面的图像将支持延迟加载。# 如果为 false，则您网站的整个图像将使用延迟加载，包括来自您主题的图像 dist，但不包括来自 CSS 样式的背景图像。</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span>  https<span class="token punctuation">:</span>//s2.loli.net/2022/08/03/yJ23MDaUGdg7LCk.gif <span class="token comment"># 加载图片 eg ./images/loading.gif</span>  <span class="token key atrule">isSPA</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># optional</span>  <span class="token key atrule">preloadRatio</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 默认是 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后hexo cl &amp;&amp; hexo g &amp;&amp; hexo s即可生效。</p><p>详细说明可以看原文介绍：<a href="https://github.com/Troy-Yang/hexo-lazyload-image">https://github.com/Troy-Yang/hexo-lazyload-image</a></p><p>一般情况下懒加载会和gallery插件会发生冲突，结果可能就是点开图片，左翻右翻都是loading image。matery主题的解决方案是：<br>修改 /themes/matery/source/js 中的 matery.js文件(我的是matery主题)<br>在第108行加上：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-服务器加速">2.服务器加速</h2><p>我们在把博客部署到github page上，会发现每次hexo d上传文件后，第一次的打开速度都比较慢，这主要是因为github的访问速度较慢。</p><p>我们可以把博客的静态文件部署到其他服务器上来加快速度，例如腾讯云或者阿里云，但国内的服务器大多要钱，而且还需要一个已备案域名来绑定。（腾讯云有个webify服务可以实现类似的功能，价格也不贵，按量计费，访问少的博客一天才几分钱。但是它默认的域名太长，不便于记忆，如果你有一个已备案的域名，且不介意这一点钱可以使用腾讯云的webify，并且在项目设置里绑定你的域名）。</p><p>白嫖党的我选择使用境外的Vercel或者netlify的免费服务器来加速。（vercel的速度好像比netlify的要快，强推）但毕竟是国外的，访问速度依旧没有国内的服务器块，而且可能偶尔会抽风，但对于个人博客够用了,下面介绍如何使用Vercel部署静态博客。</p><ol><li>首先进入Vercel的官网：<a href="https://vercel.com/">https://vercel.com/</a></li><li>将GitHub博客仓库的默认分支改为main（非源文件）（因为源文件导入vercel可能会运行错误）</li><li>Continue with Github使用Github授权并登录。点击New Porject，选择Browse All Templates选择你的博客框架，我的是hexo，然后选择Import Git Repository，授权博客文件的仓库，然后点击确定即可。settings中设置Your Username，则你的域名为Your Username.vercel.app。（是不是很好记！）</li><li>后续也可以通过把域名绑定到Cloudflare，使用Cloudflare的DNS加速，便可以使用vercel自定义域名加速访问。详细步骤见：<a href="/2022/08/19/shen-qing-mian-fei-yu-ming/" title="申请免费域名并绑定Cloudflare">申请免费域名并绑定Cloudflare</a></li></ol><p><strong>注</strong>：记得查看新建项目的view domains，左侧git项，Production Branch是博客源文件的分支（我的是source），不是hexo d生成的网页文件，是博客的源文件（包含主题和一些配置文件，其他服务器也是一样），不是的话记得修改，不然会报错。<strong>服务器的内容需要git push过一会才能生效。</strong></p><h1>代码块显示异常</h1><p>代码块“{}”显示乱码，卸载hexo-prism-plugin，删除配置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-prism-plugin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用hexo自带的PrismJS,效果一样。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># _config.yml</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_threshold</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>更改hexo d的分支</h1><p>由于github将默认分支master改为了main，而hexo-deployer-git插件没有改，所以就算你改了_config.yml的默认分支为main，hexo d后依然会创建一个master指向main，main会有一定延迟接受master分支，所以我们要将hexo-deployer-git插件你指向的master全部改为main</p><h2 id="1-修改hexo-deployer-git插件">1.修改hexo-deployer-git插件</h2><p>去目录： yourBlog\node_modules\hexo-deployer-git\lib\parse_config.js<br>VScode按F3查找master全部替换为main</p><h2 id="2-上传文件到main分支">2.上传文件到main分支</h2><p>hexo cl+hexo g+hexo d</p><h2 id="3-删除master分支">3.删除master分支</h2><p><strong>可以不删</strong><br>blog文件下打开git执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push origin :master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客相关</title>
      <link href="/2022/07/01/bo-ke-xiang-guan/"/>
      <url>/2022/07/01/bo-ke-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h1>个人备份习惯</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clhexo ghexo d<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"Backup"</span><span class="token function">git</span> push -u origin <span class="token builtin class-name">source</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>前三个用于上传.deploy_git到github的main；<br>后三个用于上传整个源文件夹到github的branch</p><h1>更新hexo和hexo插件</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用淘宝源的 cnpm 替换 npm</span><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment"># 升级 npm</span>cnpm <span class="token function">install</span> -g cnpm     <span class="token comment"># 清除 npm 缓存            </span>cnpm cache clean -f                <span class="token operator">==</span><span class="token operator">=</span>更新 hexo: 进入 blog 目录，执行如下命令<span class="token operator">==</span><span class="token operator">=</span> <span class="token comment"># 更新 package.json 中的 hexo 及个插件版本</span><span class="token comment"># 检查之前安装的插件，都有哪些是可以升级的 </span>cnpm <span class="token function">install</span> -g npm-check<span class="token comment"># 升级系统中的插件           </span>cnpm <span class="token function">install</span> -g npm-upgrade         npm-checknpm-upgrade<span class="token comment"># 更新 hexo 及所有插件</span>cnpm update<span class="token comment"># 确认 hexo 已经更新</span>hexo -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注更新完记得把修改的内容改过来：</p><ol><li>D:\MarshVer’s Blog\node_modules\hexo-deployer-git\lib\parse_config.js中的master改为main（F3查询替换）</li></ol><h1>恢复博客</h1><p>安装git、nodejs、hexo等等。。然后克隆项目到本地<br>输入下列命令克隆博客必须文件(hexo分支)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://github.com/marshver/marshver.github.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在clone下来的那个文件夹里面执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli<span class="token function">npm</span> <span class="token function">install</span><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后可以执行如下代码就可以开始你的博客了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
